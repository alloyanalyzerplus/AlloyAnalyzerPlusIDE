
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Mar 02 10:13:37 CST 2021
//----------------------------------------------------

package edu.mit.csail.sdg.parser;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;
import java.util.TreeSet;

import org.alloytools.alloy.core.AlloyCore;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.Attr.AttrType;
import edu.mit.csail.sdg.ast.CommandScope;
import edu.mit.csail.sdg.ast.Decl;
import edu.mit.csail.sdg.ast.Expr;
import edu.mit.csail.sdg.ast.ExprBadJoin;
import edu.mit.csail.sdg.ast.ExprBinary;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprITE;
import edu.mit.csail.sdg.ast.ExprLet;
import edu.mit.csail.sdg.ast.ExprList;
import edu.mit.csail.sdg.ast.ExprQt;
import edu.mit.csail.sdg.ast.ExprUnary;
import edu.mit.csail.sdg.ast.ExprVar;
import edu.mit.csail.sdg.ast.Sig;
import edu.mit.csail.sdg.ast.Sig.PrimSig;
import java_cup.runtime.Symbol;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Tue Mar 02 10:13:37 CST 2021
 */
public class CompParser extends java_cup.runtime.lr_parser {

    /** Default constructor. */
    public CompParser() {
        super();
    }

    /** Constructor which sets the default scanner. */
    public CompParser(java_cup.runtime.Scanner s) {
        super(s);
    }

    /** Constructor which sets the default scanner. */
    public CompParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /** Production table. */
    protected static final short _production_table[][] = unpackFromStrings(new String[] {
                                                                                         "\000\u016b\000\002\106\003\000\002\002\004\000\002\107" + "\005\000\002\107\010\000\002\107\006\000\002\107\010" + "\000\002\107\011\000\002\107\013\000\002\107\011\000" + "\002\107\010\000\002\107\005\000\002\107\006\000\002" + "\107\006\000\002\107\005\000\002\107\006\000\002\107" + "\006\000\002\107\004\000\002\107\004\000\002\107\004" + "\000\002\107\004\000\002\107\004\000\002\107\004\000" + "\002\107\004\000\002\107\002\000\002\013\003\000\002" + "\013\003\000\002\012\007\000\002\012\006\000\002\012" + "\011\000\002\012\010\000\002\012\007\000\002\012\006" + "\000\002\012\011\000\002\012\010\000\002\125\010\000" + "\002\125\007\000\002\125\012\000\002\125\011\000\002" + "\125\010\000\002\125\007\000\002\125\012\000\002\125" + "\011\000\002\027\002\000\002\027\004\000\002\075\004" + "\000\002\075\006\000\002\075\004\000\002\075\002\000" + "\002\112\003\000\002\112\005\000\002\111\004\000\002" + "\111\004\000\002\111\004\000\002\111\004\000\002\111" + "\004\000\002\111\004\000\002\111\004\000\002\110\004" + "\000\002\110\007\000\002\110\011\000\002\110\006\000" + "\002\110\003\000\002\110\006\000\002\110\010\000\002" + "\110\005\000\002\051\011\000\002\051\010\000\002\051" + "\011\000\002\051\010\000\002\051\006\000\002\052\003" + "\000\002\052\004\000\002\037\013\000\002\037\013\000" + "\002\037\010\000\002\037\015\000\002\037\015\000\002" + "\037\012\000\002\067\011\000\002\067\011\000\002\067" + "\006\000\002\067\013\000\002\067\013\000\002\067\010" + "\000\002\124\010\000\002\124\006\000\002\123\002\000" + "\002\123\003\000\002\076\011\000\002\100\003\000\002" + "\100\003\000\002\100\003\000\002\100\003\000\002\100" + "\003\000\002\101\003\000\002\101\004\000\002\077\004" + "\000\002\077\004\000\002\077\004\000\002\077\002\000" + "\002\102\003\000\002\102\003\000\002\102\003\000\002" + "\102\003\000\002\102\005\000\002\102\003\000\002\104" + "\002\000\002\104\003\000\002\103\003\000\002\103\005" + "\000\002\105\003\000\002\105\005\000\002\053\003\000" + "\002\053\005\000\002\053\005\000\002\054\003\000\002" + "\054\005\000\002\055\003\000\002\055\005\000\002\056" + "\003\000\002\056\004\000\002\056\005\000\002\056\006" + "\000\002\014\006\000\002\014\006\000\002\014\006\000" + "\002\014\007\000\002\014\006\000\002\014\005\000\002" + "\014\007\000\002\014\007\000\002\014\007\000\002\014" + "\010\000\002\014\007\000\002\014\006\000\002\015\003" + "\000\002\015\006\000\002\015\006\000\002\015\006\000" + "\002\015\007\000\002\015\006\000\002\015\005\000\002" + "\015\007\000\002\015\007\000\002\015\007\000\002\015" + "\010\000\002\015\007\000\002\015\006\000\002\020\005" + "\000\002\020\003\000\002\016\005\000\002\016\003\000" + "\002\017\002\000\002\017\003\000\002\017\005\000\002" + "\017\004\000\002\050\006\000\002\050\007\000\002\032" + "\002\000\002\032\003\000\002\031\006\000\002\031\005" + "\000\002\031\004\000\002\033\003\000\002\033\004\000" + "\002\034\004\000\002\034\003\000\002\035\002\000\002" + "\035\003\000\002\036\003\000\002\036\005\000\002\030" + "\003\000\002\030\003\000\002\030\003\000\002\005\004" + "\000\002\005\005\000\002\005\005\000\002\005\005\000" + "\002\005\005\000\002\005\005\000\002\005\005\000\002" + "\063\003\000\002\063\005\000\002\064\003\000\002\064" + "\005\000\002\025\003\000\002\025\005\000\002\026\003" + "\000\002\026\005\000\002\040\003\000\002\040\003\000" + "\002\042\003\000\002\042\007\000\002\044\007\000\002" + "\044\005\000\002\042\007\000\002\044\005\000\002\041" + "\003\000\002\041\003\000\002\043\003\000\002\043\007" + "\000\002\045\007\000\002\045\005\000\002\002\003\000" + "\002\002\005\000\002\003\003\000\002\003\005\000\002" + "\057\003\000\002\057\004\000\002\057\004\000\002\060" + "\003\000\002\060\004\000\002\010\005\000\002\010\005" + "\000\002\010\005\000\002\010\005\000\002\010\005\000" + "\002\010\005\000\002\010\005\000\002\010\005\000\002" + "\010\005\000\002\010\005\000\002\010\005\000\002\010" + "\005\000\002\010\004\000\002\010\004\000\002\010\004" + "\000\002\010\004\000\002\010\004\000\002\010\004\000" + "\002\010\004\000\002\010\003\000\002\011\005\000\002" + "\011\005\000\002\011\005\000\002\011\005\000\002\011" + "\005\000\002\011\005\000\002\011\005\000\002\011\005" + "\000\002\011\005\000\002\011\005\000\002\011\005\000" + "\002\011\005\000\002\011\004\000\002\011\004\000\002" + "\011\004\000\002\011\004\000\002\011\004\000\002\011" + "\004\000\002\011\004\000\002\011\003\000\002\113\003" + "\000\002\113\005\000\002\113\005\000\002\113\005\000" + "\002\114\003\000\002\114\005\000\002\114\005\000\002" + "\114\005\000\002\117\003\000\002\117\005\000\002\117" + "\005\000\002\117\005\000\002\117\005\000\002\120\003" + "\000\002\120\005\000\002\120\005\000\002\120\005\000" + "\002\120\005\000\002\115\003\000\002\115\005\000\002" + "\115\005\000\002\115\005\000\002\116\003\000\002\116" + "\005\000\002\116\005\000\002\116\005\000\002\061\003" + "\000\002\061\004\000\002\061\004\000\002\061\004\000" + "\002\061\004\000\002\061\004\000\002\061\004\000\002" + "\062\003\000\002\062\004\000\002\062\004\000\002\062" + "\004\000\002\065\003\000\002\065\005\000\002\066\003" + "\000\002\066\005\000\002\046\003\000\002\046\005\000" + "\002\047\003\000\002\047\005\000\002\072\003\000\002" + "\072\003\000\002\072\003\000\002\072\003\000\002\072" + "\003\000\002\072\003\000\002\072\003\000\002\072\003" + "\000\002\072\003\000\002\072\003\000\002\072\003\000" + "\002\072\003\000\002\072\003\000\002\072\003\000\002" + "\072\003\000\002\072\003\000\002\073\003\000\002\073" + "\005\000\002\074\003\000\002\074\005\000\002\021\003" + "\000\002\021\005\000\002\022\003\000\002\022\005\000" + "\002\070\003\000\002\070\005\000\002\071\003\000\002" + "\071\005\000\002\006\003\000\002\007\003\000\002\007" + "\006\000\002\007\006\000\002\007\006\000\002\007\006" + "\000\002\007\006\000\002\023\003\000\002\023\005\000" + "\002\024\003\000\002\024\005\000\002\024\005\000\002" + "\024\005\000\002\024\005\000\002\024\005\000\002\121" + "\004\000\002\121\004\000\002\121\004\000\002\121\004" + "\000\002\121\004\000\002\121\004\000\002\122\003\000" + "\002\122\004\000\002\122\004\000\002\122\004\000\002" + "\004\003\000\002\004\003\000\002\004\003\000\002\004" + "\003\000\002\004\003\000\002\004\003\000\002\004\003" + "\000\002\004\005\000\002\004\003\000\002\004\004\000" + "\002\004\003\000\002\004\006\000\002\004\005"
    });

    /** Access to production table. */
    @Override
    public short[][] production_table() {
        return _production_table;
    }

    /** Parse-action table. */
    protected static final short[][] _action_table = unpackFromStrings(new String[] {
                                                                                     "\000\u02de\000\002\001\uffea\000\004\002\u02e0\001\002\000" + "\034\002\001\035\030\043\011\050\020\065\017\104\006" + "\111\024\125\031\134\013\141\025\147\014\153\032\164" + "\010\001\uffab\000\002\001\uffa7\000\002\001\uffef\000\006" + "\050\020\141\025\001\002\000\016\100\247\142\057\160" + "\052\165\111\166\047\170\u02bf\001\002\000\002\001\uffec" + "\000\016\057\uffaa\067\uffaa\102\uffaa\126\uffaa\133\uffaa\163" + "\uffaa\001\uffa4\000\002\001\uffa3\000\014\100\247\142\057" + "\160\052\165\111\166\047\001\002\000\002\001\ufff0\000" + "\016\100\247\142\057\160\052\165\111\166\047\170\u02ae" + "\001\002\000\002\001\uffe9\000\002\001\ufff1\000\002\001" + "\uffed\000\016\035\030\104\006\125\031\134\u02ad\147\014" + "\153\032\001\002\000\010\142\057\160\052\166\047\001" + "\002\000\002\001\uffe8\000\010\142\057\160\052\166\047" + "\001\002\000\004\075\u0260\001\uffeb\000\002\001\uffa8\000" + "\002\001\uffa6\000\002\001\uffa5\000\002\001\uffee\000\016" + "\057\035\067\042\102\036\126\041\133\040\163\037\001" + "\002\000\010\142\057\160\052\166\047\001\002\000\010" + "\142\057\160\052\166\047\001\002\000\020\114\051\142" + "\045\150\053\155\044\160\052\162\050\166\047\001\002" + "\000\020\114\051\142\045\150\053\155\044\160\052\162" + "\050\166\047\001\002\000\010\142\057\160\052\166\047" + "\001\002\000\020\114\051\142\045\150\053\155\044\160" + "\052\162\050\166\047\001\002\000\010\051\u0213\101\u0215" + "\105\u0214\001\uff9d\000\002\001\uff9b\000\004\151\u0117\001" + "\002\000\004\151\062\001\uff91\000\002\001\uff8e\000\002" + "\001\uff9c\000\002\001\uff98\000\004\151\u0123\001\002\000" + "\002\001\uff9a\000\004\055\055\001\002\000\010\142\057" + "\160\052\166\047\001\002\000\010\051\064\101\066\105" + "\065\001\002\000\004\151\060\001\002\000\004\166\047" + "\001\002\000\004\151\062\001\uff8f\000\004\166\063\001" + "\002\000\002\001\uff8d\000\120\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\102\222\103\211\104\160" + "\105\134\112\157\113\217\114\051\115\141\124\121\125" + "\161\142\205\143\204\150\053\152\166\153\212\154\167" + "\155\044\156\203\157\126\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\022\052\077" + "\053\067\062\071\130\070\134\100\142\057\160\052\166" + "\047\001\uff69\000\022\052\077\053\067\062\071\130\070" + "\134\100\142\057\160\052\166\047\001\uff69\000\010\142" + "\057\160\052\166\047\001\002\000\010\142\057\160\052" + "\166\047\001\002\000\010\142\057\160\052\166\047\001" + "\002\000\002\001\uff8c\000\004\052\u01fb\001\uff68\000\002" + "\001\uff7a\000\010\051\u01c1\052\103\060\u01f7\001\002\000" + "\004\137\u01f3\001\002\000\022\052\077\053\067\062\071" + "\130\070\134\100\142\057\160\052\166\047\001\uff69\000" + "\012\053\101\142\057\160\052\166\047\001\002\000\010" + "\142\057\160\052\166\047\001\002\000\010\051\105\052" + "\103\060\104\001\002\000\010\142\057\160\052\166\047" + "\001\002\000\120\031\125\032\151\033\155\034\156\036" + "\131\037\201\044\106\047\215\053\u01ea\072\225\073\123" + "\077\172\100\132\102\222\103\211\104\160\105\134\112" + "\157\113\217\114\051\115\141\124\121\125\161\142\205" + "\143\204\150\053\152\166\153\212\154\167\155\044\156" + "\203\157\126\160\176\161\142\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\120\031\125\032\151\033" + "\155\034\156\036\131\037\201\044\106\047\215\053\174" + "\072\225\073\123\077\172\100\132\102\222\103\211\104" + "\160\105\134\112\157\113\217\114\051\115\141\124\121" + "\125\161\142\205\143\204\150\053\152\166\153\212\154" + "\167\155\044\156\203\157\126\160\176\161\142\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\010\142" + "\057\160\052\166\047\001\002\000\002\001\uff46\000\002" + "\001\uff48\000\004\100\u01e5\001\002\000\002\001\uff54\000" + "\006\041\u01dc\075\u01db\001\uff3a\000\002\001\uff42\000\044" + "\004\355\005\342\006\356\007\350\010\351\011\360\012" + "\353\013\345\014\361\015\347\016\344\017\352\020\343" + "\021\354\022\346\023\362\054\u01d7\001\ufec6\000\002\001" + "\ufec8\000\002\001\ufeef\000\002\001\ufef3\000\020\053\067" + "\062\071\130\070\134\100\142\057\160\052\166\047\001" + "\002\000\004\132\u01d3\001\ufee4\000\002\001\ufea1\000\002" + "\001\ufeeb\000\002\001\ufe9f\000\104\031\125\032\151\033" + "\155\034\156\037\201\044\106\047\215\053\230\072\225" + "\073\123\077\172\100\132\101\317\102\222\103\211\105" + "\134\112\157\114\051\124\121\142\045\150\053\152\166" + "\154\167\155\044\156\203\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\uff34\000\002\001\uff36\000\064\031\125\032\151\033" + "\155\034\156\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\105\134\114\051\142\045\150\053\154" + "\167\155\044\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\130\031\125\032" + "\151\033\155\034\156\036\131\037\201\044\106\047\215" + "\053\u01ab\062\u01a7\072\225\073\123\077\172\100\132\102" + "\222\103\211\104\160\105\134\112\157\113\217\114\051" + "\115\141\124\121\125\161\130\u01a8\134\u01ae\136\253\142" + "\205\143\204\150\053\152\166\153\212\154\167\155\044" + "\156\203\157\126\160\176\161\142\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\002\001\uff82\000\120" + "\031\125\032\151\033\155\034\156\036\131\037\201\044" + "\106\047\215\053\230\072\225\073\123\077\172\100\132" + "\102\222\103\211\104\160\105\134\112\157\113\217\114" + "\051\115\141\124\121\125\161\142\205\143\204\150\053" + "\152\166\153\212\154\167\155\044\156\203\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\004\135\u01a3\001\ufec2\000\002\001\ufec4\000" + "\006\055\u01a1\101\306\001\ufebe\000\002\001\ufec0\000\120" + "\031\125\032\151\033\155\034\156\036\131\037\201\044" + "\106\047\215\053\230\072\225\073\123\077\172\100\132" + "\102\222\103\211\104\160\105\134\112\157\113\217\114" + "\051\115\141\124\121\125\161\142\205\143\204\150\053" + "\152\166\153\212\154\167\155\044\156\203\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\070\031\125\032\151\033\155\037\201\044" + "\106\047\215\073\123\100\132\102\222\103\211\105\134" + "\112\157\114\051\124\121\142\045\150\053\152\166\154" + "\167\155\044\156\203\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\002\001\ufe9b\000" + "\002\001\ufea2\000\010\144\u0101\145\u0100\146\u0102\001\uff06" + "\000\002\001\uff1a\000\032\060\u0183\070\u0181\071\u017a\076" + "\u017c\106\u0184\107\u017d\116\u017b\117\u0180\120\u017e\121\u0179" + "\122\u0182\123\u017f\001\uff2f\000\002\001\uff32\000\002\001" + "\ufe9e\000\004\127\u0175\001\uff55\000\002\001\uff56\000\002" + "\001\ufea3\000\002\001\ufe9d\000\004\101\u0172\001\002\000" + "\020\053\067\062\071\130\070\134\100\142\057\160\052" + "\166\047\001\002\000\064\031\125\032\151\033\155\034" + "\156\044\106\047\215\053\230\072\225\073\123\077\172" + "\100\132\105\134\114\051\142\045\150\053\154\167\155" + "\044\157\126\160\176\161\142\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\064\031\125\032\151\033" + "\155\034\156\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\105\134\114\051\142\045\150\053\154" + "\167\155\044\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\004\074\u0132\001" + "\uff4a\000\002\001\uff4c\000\002\001\ufeda\000\002\001\ufedc" + "\000\020\053\067\062\071\130\070\134\100\142\057\160" + "\052\166\047\001\002\000\070\031\125\032\151\033\155" + "\037\201\044\106\047\215\073\123\100\132\102\222\103" + "\211\105\134\112\157\114\051\124\121\142\045\150\053" + "\152\166\154\167\155\044\156\203\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\ufeb3\000\002\001\ufeb5\000\104\031\125\032\151\033" + "\155\034\156\037\201\044\106\047\215\053\230\072\225" + "\073\123\077\172\100\132\101\322\102\222\103\211\105" + "\134\112\157\114\051\124\121\142\045\150\053\152\166" + "\154\167\155\044\156\203\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\ufea7\000\122\031\125\032\151\033\155\034\156\036" + "\131\037\201\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\101\232\102\222\103\211\104\160\105" + "\134\112\157\113\217\114\051\115\141\124\121\125\161" + "\142\205\143\204\150\053\152\166\153\212\154\167\155" + "\044\156\203\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\010\026\u0125\027" + "\u0126\030\u0127\001\ufef8\000\004\151\u0123\001\ufea0\000\002" + "\001\ufefd\000\004\040\u0121\001\ufede\000\020\053\067\062" + "\071\130\070\134\100\142\057\160\052\166\047\001\002" + "\000\002\001\ufee0\000\020\053\067\062\071\130\070\134" + "\100\142\057\160\052\166\047\001\002\000\064\031\125" + "\032\151\033\155\034\156\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\105\134\114\051\142\045" + "\150\053\154\167\155\044\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\066" + "\031\125\032\151\033\155\034\156\044\106\047\215\053" + "\230\072\225\073\123\077\172\100\132\105\134\114\051" + "\142\045\150\053\151\u0117\154\167\155\044\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\002\001\uff9d\000\002\001\ufebb\000\002\001" + "\ufebc\000\020\053\067\062\071\130\070\134\100\142\057" + "\160\052\166\047\001\002\000\064\031\125\032\151\033" + "\155\034\156\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\105\134\114\051\142\045\150\053\154" + "\167\155\044\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\002\001\uff3c\000" + "\002\001\uff44\000\070\031\125\032\151\033\155\037\201" + "\044\106\047\215\073\123\100\132\102\222\103\211\105" + "\134\112\157\114\051\124\121\142\045\150\053\152\166" + "\154\167\155\044\156\203\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\002\001\ufe99" + "\000\064\031\125\032\151\033\155\034\156\044\106\047" + "\215\053\230\072\225\073\123\077\172\100\132\105\134" + "\114\051\142\045\150\053\154\167\155\044\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\012\024\264\025\262\110\263\131\261\001" + "\uff01\000\002\001\uff05\000\010\142\057\160\052\166\047" + "\001\002\000\002\001\uff3b\000\002\001\uff43\000\102\031" + "\125\032\151\033\155\034\156\037\201\044\106\047\215" + "\053\230\072\225\073\123\077\172\100\132\102\222\103" + "\211\105\134\112\157\114\051\124\121\142\045\150\053" + "\152\166\154\167\155\044\156\203\157\126\160\176\161" + "\142\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\002\001\ufee3\000\002\001\ufee7\000\004\101\232\001" + "\002\000\002\001\ufeea\000\120\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\102\222\103\211\104\160" + "\105\134\112\157\113\217\114\051\115\141\124\121\125" + "\161\142\205\143\204\150\053\152\166\153\212\154\167" + "\155\044\156\203\157\126\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\uff5a\000\002\001\uff58" + "\000\004\137\240\001\002\000\004\052\236\001\uff59\000" + "\120\031\125\032\151\033\155\034\156\036\131\037\201" + "\044\106\047\215\053\230\072\225\073\123\077\172\100" + "\132\102\222\103\211\104\160\105\134\112\157\113\217" + "\114\051\115\141\124\121\125\161\142\205\143\204\150" + "\053\152\166\153\212\154\167\155\044\156\203\157\126" + "\160\176\161\142\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\002\001\uff57\000\002\001\ufeb9\000\004" + "\060\243\001\002\000\002\001\uff53\000\120\031\125\032" + "\151\033\155\034\156\036\131\037\201\044\106\047\215" + "\053\230\072\225\073\123\077\172\100\132\102\222\103" + "\211\104\160\105\134\112\157\113\217\114\051\115\141" + "\124\121\125\161\142\205\143\204\150\053\152\166\153" + "\212\154\167\155\044\156\203\157\126\160\176\161\142" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\012\045\250\052\245\100\247\165\111\001\002\000\010" + "\142\057\160\052\166\047\001\002\000\002\001\uff65\000" + "\122\031\125\032\151\033\155\034\156\036\131\037\201" + "\044\106\047\215\053\230\072\225\073\123\077\172\100" + "\132\102\222\103\211\104\160\105\134\112\157\113\217" + "\114\051\115\141\124\121\125\161\136\253\142\205\143" + "\204\150\053\152\166\153\212\154\167\155\044\156\203" + "\157\126\160\176\161\142\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\120\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\102\222\103\211\104\160" + "\105\134\112\157\113\217\114\051\115\141\124\121\125" + "\161\142\205\143\204\150\053\152\166\153\212\154\167" + "\155\044\156\203\157\126\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\002\001\uff5b" + "\000\002\001\uff5c\000\002\001\uff5f\000\002\001\uff5e\000" + "\122\031\125\032\151\033\155\034\156\036\131\037\201" + "\044\106\047\215\053\230\072\225\073\123\077\172\100" + "\132\102\222\103\211\104\160\105\134\112\157\113\217" + "\114\051\115\141\124\121\125\161\136\256\142\205\143" + "\204\150\053\152\166\153\212\154\167\155\044\156\203" + "\157\126\160\176\161\142\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\002\001\uff60\000\002\001\uff5d" + "\000\002\001\uff64\000\102\031\125\032\151\033\155\034" + "\156\037\201\044\106\047\274\053\230\072\266\073\123" + "\077\267\100\132\102\222\103\211\105\134\112\157\114" + "\051\124\121\142\045\150\053\152\166\154\271\155\044" + "\156\203\157\277\160\176\161\270\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\102\031\125\032\151" + "\033\155\034\156\037\201\044\106\047\274\053\230\072" + "\266\073\123\077\267\100\132\102\222\103\211\105\134" + "\112\157\114\051\124\121\142\045\150\053\152\166\154" + "\271\155\044\156\203\157\277\160\176\161\270\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\102\031" + "\125\032\151\033\155\034\156\037\201\044\106\047\274" + "\053\230\072\266\073\123\077\267\100\132\102\222\103" + "\211\105\134\112\157\114\051\124\121\142\045\150\053" + "\152\166\154\271\155\044\156\203\157\277\160\176\161" + "\270\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\102\031\125\032\151\033\155\034\156\037\201\044" + "\106\047\274\053\230\072\266\073\123\077\267\100\132" + "\102\222\103\211\105\134\112\157\114\051\124\121\142" + "\045\150\053\152\166\154\271\155\044\156\203\157\277" + "\160\176\161\270\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\004\040\337\001\ufede\000\064\031\125" + "\032\151\033\155\034\156\044\106\047\274\053\230\072" + "\266\073\123\077\267\100\132\105\134\114\051\142\045" + "\150\053\154\271\155\044\157\277\160\176\161\270\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\066" + "\031\125\032\151\033\155\034\156\044\106\047\274\053" + "\230\072\266\073\123\077\267\100\132\101\322\105\134" + "\114\051\142\045\150\053\154\271\155\044\157\277\160" + "\176\161\270\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\052\031\125\032\151\033\155\044\106\047" + "\274\073\123\100\132\105\134\114\051\142\045\150\053" + "\154\271\155\044\160\176\161\270\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\052\031\125\032\151" + "\033\155\044\106\047\274\073\123\100\132\105\134\114" + "\051\142\045\150\053\154\271\155\044\160\176\161\270" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\044\004\355\005\342\006\356\007\350\010\351\011\360" + "\012\353\013\345\014\361\015\347\016\344\017\352\020" + "\343\021\354\022\346\023\362\054\341\001\ufec6\000\004" + "\132\335\001\ufee4\000\052\031\125\032\151\033\155\044" + "\106\047\274\073\123\100\132\105\134\114\051\142\045" + "\150\053\154\271\155\044\160\176\161\270\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\010\026\326" + "\027\327\030\330\001\ufef5\000\006\055\307\101\306\001" + "\ufebe\000\066\031\125\032\151\033\155\034\156\044\106" + "\047\274\053\230\072\266\073\123\077\267\100\132\101" + "\317\105\134\114\051\142\045\150\053\154\271\155\044" + "\157\277\160\176\161\270\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\004\135\302\001\ufec2\000\002" + "\001\ufefa\000\062\031\125\032\151\033\155\034\156\044" + "\106\047\274\053\230\073\123\077\303\100\132\105\134" + "\114\051\142\045\150\053\154\271\155\044\157\304\160" + "\176\161\270\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\004\101\322\001\002\000\004\101\317\001" + "\002\000\006\055\307\101\306\001\ufebd\000\120\031\125" + "\032\151\033\155\034\156\036\131\037\201\044\106\047" + "\215\053\230\072\225\073\123\077\172\100\132\102\222" + "\103\211\104\160\105\134\112\157\113\217\114\051\115" + "\141\124\121\125\161\142\205\143\204\150\053\152\166" + "\153\212\154\167\155\044\156\203\157\126\160\176\161" + "\142\162\050\165\111\166\047\167\154\170\144\001\uff5a" + "\000\062\031\125\032\151\033\155\034\310\044\106\047" + "\274\053\312\073\123\077\311\100\132\105\134\114\051" + "\142\045\150\053\154\271\155\044\157\313\160\176\161" + "\270\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\002\001\ufeb0\000\002\001\ufeaf\000\002\001\ufeb1\000" + "\002\001\ufeae\000\002\001\ufeb2\000\004\137\316\001\002" + "\000\002\001\ufeba\000\120\031\125\032\151\033\155\034" + "\156\036\131\037\201\044\106\047\215\053\230\072\225" + "\073\123\077\172\100\132\102\222\103\211\104\160\105" + "\134\112\157\113\217\114\051\115\141\124\121\125\161" + "\142\205\143\204\150\053\152\166\153\212\154\167\155" + "\044\156\203\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\uff5a\000\004\137\321\001" + "\002\000\002\001\ufeb6\000\120\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\102\222\103\211\104\160" + "\105\134\112\157\113\217\114\051\115\141\124\121\125" + "\161\142\205\143\204\150\053\152\166\153\212\154\167" + "\155\044\156\203\157\126\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\uff5a\000\004\137\324" + "\001\002\000\002\001\ufeb7\000\002\001\ufee2\000\064\031" + "\125\032\151\033\155\034\156\044\106\047\274\053\230" + "\072\266\073\123\077\267\100\132\105\134\114\051\142" + "\045\150\053\154\271\155\044\157\277\160\176\161\270" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\064\031\125\032\151\033\155\034\156\044\106\047\274" + "\053\230\072\266\073\123\077\267\100\132\105\134\114" + "\051\142\045\150\053\154\271\155\044\157\277\160\176" + "\161\270\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\064\031\125\032\151\033\155\034\156\044\106" + "\047\274\053\230\072\266\073\123\077\267\100\132\105" + "\134\114\051\142\045\150\053\154\271\155\044\157\277" + "\160\176\161\270\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\002\001\ufeec\000\002\001\ufeed\000\002" + "\001\ufeee\000\002\001\ufea4\000\062\031\125\032\151\033" + "\155\034\156\044\106\047\274\053\230\073\123\077\303" + "\100\132\105\134\114\051\142\045\150\053\154\271\155" + "\044\157\304\160\176\161\270\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\004\040\337\001\ufedd\000" + "\062\031\125\032\151\033\155\034\156\044\106\047\274" + "\053\230\073\123\077\303\100\132\105\134\114\051\142" + "\045\150\053\154\271\155\044\157\304\160\176\161\270" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\002\001\ufed9\000\062\031\125\032\151\033\155\034\156" + "\044\106\047\274\053\230\073\123\077\303\100\132\105" + "\134\114\051\142\045\150\053\154\271\155\044\157\304" + "\160\176\161\270\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\002\001\ufed7\000\002\001\ufecc\000\002" + "\001\ufece\000\002\001\ufed1\000\002\001\ufeca\000\002\001" + "\ufecf\000\002\001\ufed5\000\002\001\ufed4\000\002\001\ufecd" + "\000\002\001\ufed2\000\002\001\ufecb\000\002\001\ufed8\000" + "\002\001\ufed6\000\062\031\125\032\151\033\155\034\156" + "\044\106\047\274\053\230\073\123\077\303\100\132\105" + "\134\114\051\142\045\150\053\154\271\155\044\157\304" + "\160\176\161\270\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\002\001\ufed3\000\002\001\ufed0\000\002" + "\001\ufec9\000\002\001\ufec5\000\004\135\302\001\ufec1\000" + "\002\001\ufea5\000\002\001\ufea6\000\002\001\ufee1\000\010" + "\026\326\027\327\030\330\001\ufef6\000\002\001\ufefb\000" + "\010\026\326\027\327\030\330\001\ufef4\000\002\001\ufef9" + "\000\010\026\326\027\327\030\330\001\ufef7\000\002\001" + "\ufefc\000\010\144\u0101\145\u0100\146\u0102\001\uff0c\000\002" + "\001\uff20\000\102\031\125\032\151\033\155\034\156\037" + "\201\044\106\047\274\053\230\072\266\073\123\077\267" + "\100\132\102\222\103\211\105\134\112\157\114\051\124" + "\121\142\045\150\053\152\166\154\271\155\044\156\203" + "\157\277\160\176\161\270\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\102\031\125\032\151\033\155" + "\034\156\037\201\044\106\047\274\053\230\072\266\073" + "\123\077\267\100\132\102\222\103\211\105\134\112\157" + "\114\051\124\121\142\045\150\053\152\166\154\271\155" + "\044\156\203\157\277\160\176\161\270\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\102\031\125\032" + "\151\033\155\034\156\037\201\044\106\047\274\053\230" + "\072\266\073\123\077\267\100\132\102\222\103\211\105" + "\134\112\157\114\051\124\121\142\045\150\053\152\166" + "\154\271\155\044\156\203\157\277\160\176\161\270\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\012" + "\024\u0109\025\u0107\110\u0108\131\u0106\001\ufefe\000\010\026" + "\326\027\327\030\330\001\ufef8\000\002\001\uff02\000\064" + "\031\125\032\151\033\155\034\156\044\106\047\274\053" + "\230\072\266\073\123\077\267\100\132\105\134\114\051" + "\142\045\150\053\154\271\155\044\157\277\160\176\161" + "\270\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\064\031\125\032\151\033\155\034\156\044\106\047" + "\274\053\230\072\266\073\123\077\267\100\132\105\134" + "\114\051\142\045\150\053\154\271\155\044\157\277\160" + "\176\161\270\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\064\031\125\032\151\033\155\034\156\044" + "\106\047\274\053\230\072\266\073\123\077\267\100\132" + "\105\134\114\051\142\045\150\053\154\271\155\044\157" + "\277\160\176\161\270\162\050\165\111\166\047\167\154" + "\170\144\001\002\000\064\031\125\032\151\033\155\034" + "\156\044\106\047\274\053\230\072\266\073\123\077\267" + "\100\132\105\134\114\051\142\045\150\053\154\271\155" + "\044\157\277\160\176\161\270\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\012\024\u0109\025\u0107\110" + "\u0108\131\u0106\001\uff00\000\002\001\uff04\000\012\024\u0109" + "\025\u0107\110\u0108\131\u0106\001\ufeff\000\002\001\uff03\000" + "\002\001\ufeab\000\002\001\ufea8\000\010\144\u0101\145\u0100" + "\146\u0102\001\uff0b\000\002\001\uff1f\000\002\001\uff6a\000" + "\012\045\250\052\u0114\100\247\165\111\001\002\000\020" + "\053\067\062\071\130\070\134\100\142\057\160\052\166" + "\047\001\002\000\002\001\uff4f\000\002\001\uff6b\000\006" + "\150\u011a\166\047\001\002\000\010\144\u0101\145\u0100\146" + "\u0102\001\uff07\000\002\001\uff1b\000\002\001\uff99\000\010" + "\144\u0101\145\u0100\146\u0102\001\uff08\000\002\001\uff1c\000" + "\012\045\250\052\u0114\100\247\165\111\001\002\000\002" + "\001\uff4d\000\012\045\250\052\u0114\100\247\165\111\001" + "\002\000\002\001\uff52\000\100\031\125\032\151\033\155" + "\034\156\037\201\044\106\047\274\053\230\073\123\077" + "\303\100\132\102\222\103\211\105\134\112\157\114\051" + "\124\121\142\045\150\053\152\166\154\271\155\044\156" + "\203\157\304\160\176\161\270\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\002\001\ufedb\000\004\166" + "\047\001\002\000\004\151\062\001\uff90\000\102\031\125" + "\032\151\033\155\034\156\037\201\044\106\047\274\053" + "\230\072\266\073\123\077\267\100\132\102\222\103\211" + "\105\134\112\157\114\051\124\121\142\045\150\053\152" + "\166\154\271\155\044\156\203\157\277\160\176\161\270" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\102\031\125\032\151\033\155\034\156\037\201\044\106" + "\047\274\053\230\072\266\073\123\077\267\100\132\102" + "\222\103\211\105\134\112\157\114\051\124\121\142\045" + "\150\053\152\166\154\271\155\044\156\203\157\277\160" + "\176\161\270\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\102\031\125\032\151\033\155\034\156\037" + "\201\044\106\047\274\053\230\072\266\073\123\077\267" + "\100\132\102\222\103\211\105\134\112\157\114\051\124" + "\121\142\045\150\053\152\166\154\271\155\044\156\203" + "\157\277\160\176\161\270\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\002\001\ufef0\000\002\001\ufef1" + "\000\002\001\ufef2\000\002\001\uff7c\000\002\001\ufee5\000" + "\002\001\ufee8\000\002\001\ufeac\000\002\001\ufea9\000\012" + "\045\250\052\u0114\100\247\165\111\001\002\000\002\001" + "\uff50\000\120\031\125\032\151\033\155\034\156\036\u013d" + "\037\201\044\106\047\274\053\230\072\266\073\123\077" + "\267\100\132\102\222\103\211\104\u013e\105\134\112\157" + "\113\u013c\114\051\115\u0135\124\121\125\u013b\142\u0133\143" + "\u013f\150\053\152\166\153\u0134\154\271\155\044\156\203" + "\157\277\160\176\161\270\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\066\031\125\032\151\033\155" + "\034\156\044\106\047\274\053\230\072\266\073\123\077" + "\267\100\132\105\134\114\051\142\045\150\053\151\u0117" + "\154\271\155\044\157\277\160\176\161\270\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\064\031\125" + "\032\151\033\155\034\156\044\106\047\274\053\230\072" + "\266\073\123\077\267\100\132\105\134\114\051\142\045" + "\150\053\154\271\155\044\157\277\160\176\161\270\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\102" + "\031\125\032\151\033\155\034\156\036\u013d\044\106\047" + "\274\053\230\072\266\073\123\077\267\100\132\104\u013e" + "\105\134\113\u013c\114\051\115\u0135\125\u013b\142\u0133\143" + "\u013f\150\053\153\u0134\154\271\155\044\157\277\160\176" + "\161\270\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\010\144\u0144\145\u0142\146\u0143\001\uff06\000\032" + "\060\u015b\070\u0159\071\u0154\076\u0153\106\u015c\107\u0155\116" + "\u0152\117\u0158\120\u0156\121\u0151\122\u015a\123\u0157\001\uff2f" + "\000\006\041\u014a\075\u0149\001\uff3a\000\002\001\uff45\000" + "\012\024\u0109\025\u0107\110\u0108\131\u0106\001\uff01\000\064" + "\031\125\032\151\033\155\034\156\044\106\047\274\053" + "\230\072\266\073\123\077\267\100\132\105\134\114\051" + "\142\045\150\053\154\271\155\044\157\277\160\176\161" + "\270\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\064\031\125\032\151\033\155\034\156\044\106\047" + "\274\053\230\072\266\073\123\077\267\100\132\105\134" + "\114\051\142\045\150\053\154\271\155\044\157\277\160" + "\176\161\270\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\064\031\125\032\151\033\155\034\156\044" + "\106\047\274\053\230\072\266\073\123\077\267\100\132" + "\105\134\114\051\142\045\150\053\154\271\155\044\157" + "\277\160\176\161\270\162\050\165\111\166\047\167\154" + "\170\144\001\002\000\064\031\125\032\151\033\155\034" + "\156\044\106\047\274\053\230\072\266\073\123\077\267" + "\100\132\105\134\114\051\142\045\150\053\154\271\155" + "\044\157\277\160\176\161\270\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\064\031\125\032\151\033" + "\155\034\156\044\106\047\274\053\230\072\266\073\123" + "\077\267\100\132\105\134\114\051\142\045\150\053\154" + "\271\155\044\157\277\160\176\161\270\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\002\001\uff47\000" + "\010\144\u0144\145\u0142\146\u0143\001\uff08\000\064\031\125" + "\032\151\033\155\034\156\044\106\047\274\053\230\072" + "\266\073\123\077\267\100\132\105\134\114\051\142\045" + "\150\053\154\271\155\044\157\277\160\176\161\270\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\064" + "\031\125\032\151\033\155\034\156\044\106\047\274\053" + "\230\072\266\073\123\077\267\100\132\105\134\114\051" + "\142\045\150\053\154\271\155\044\157\277\160\176\161" + "\270\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\064\031\125\032\151\033\155\034\156\044\106\047" + "\274\053\230\072\266\073\123\077\267\100\132\105\134" + "\114\051\142\045\150\053\154\271\155\044\157\277\160" + "\176\161\270\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\010\144\u0144\145\u0142\146\u0143\001\uff0a\000" + "\010\144\u0144\145\u0142\146\u0143\001\uff0d\000\010\144\u0144" + "\145\u0142\146\u0143\001\uff0c\000\010\144\u0144\145\u0142\146" + "\u0143\001\uff09\000\102\031\125\032\151\033\155\034\156" + "\036\u013d\044\106\047\274\053\230\072\266\073\123\077" + "\267\100\132\104\u013e\105\134\113\u013c\114\051\115\u0135" + "\125\u013b\142\u0133\143\u013f\150\053\153\u0134\154\271\155" + "\044\157\277\160\176\161\270\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\102\031\125\032\151\033" + "\155\034\156\036\u013d\044\106\047\274\053\230\072\266" + "\073\123\077\267\100\132\104\u013e\105\134\113\u013c\114" + "\051\115\u0135\125\u013b\142\u0133\143\u013f\150\053\153\u0134" + "\154\271\155\044\157\277\160\176\161\270\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\002\001\uff33" + "\000\002\001\uff37\000\004\056\u014e\001\uff3c\000\102\031" + "\125\032\151\033\155\034\156\036\u013d\044\106\047\274" + "\053\230\072\266\073\123\077\267\100\132\104\u013e\105" + "\134\113\u013c\114\051\115\u0135\125\u013b\142\u0133\143\u013f" + "\150\053\153\u0134\154\271\155\044\157\277\160\176\161" + "\270\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\002\001\uff38\000\002\001\uff39\000\064\031\125\032" + "\151\033\155\034\156\044\106\047\274\053\230\072\266" + "\073\123\077\267\100\132\105\134\114\051\142\045\150" + "\053\154\271\155\044\157\277\160\176\161\270\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\064\031" + "\125\032\151\033\155\034\156\044\106\047\274\053\230" + "\072\266\073\123\077\267\100\132\105\134\114\051\142" + "\045\150\053\154\271\155\044\157\277\160\176\161\270" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\064\031\125\032\151\033\155\034\156\044\106\047\274" + "\053\230\072\266\073\123\077\267\100\132\105\134\114" + "\051\142\045\150\053\154\271\155\044\157\277\160\176" + "\161\270\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\064\031\125\032\151\033\155\034\156\044\106" + "\047\274\053\230\072\266\073\123\077\267\100\132\105" + "\134\114\051\142\045\150\053\154\271\155\044\157\277" + "\160\176\161\270\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\064\031\125\032\151\033\155\034\156" + "\044\106\047\274\053\230\072\266\073\123\077\267\100" + "\132\105\134\114\051\142\045\150\053\154\271\155\044" + "\157\277\160\176\161\270\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\064\031\125\032\151\033\155" + "\034\156\044\106\047\274\053\230\072\266\073\123\077" + "\267\100\132\105\134\114\051\142\045\150\053\154\271" + "\155\044\157\277\160\176\161\270\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\064\031\125\032\151" + "\033\155\034\156\044\106\047\274\053\230\072\266\073" + "\123\077\267\100\132\105\134\114\051\142\045\150\053" + "\154\271\155\044\157\277\160\176\161\270\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\064\031\125" + "\032\151\033\155\034\156\044\106\047\274\053\230\072" + "\266\073\123\077\267\100\132\105\134\114\051\142\045" + "\150\053\154\271\155\044\157\277\160\176\161\270\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\064" + "\031\125\032\151\033\155\034\156\044\106\047\274\053" + "\230\072\266\073\123\077\267\100\132\105\134\114\051" + "\142\045\150\053\154\271\155\044\157\277\160\176\161" + "\270\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\064\031\125\032\151\033\155\034\156\044\106\047" + "\274\053\230\072\266\073\123\077\267\100\132\105\134" + "\114\051\142\045\150\053\154\271\155\044\157\277\160" + "\176\161\270\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\064\031\125\032\151\033\155\034\156\044" + "\106\047\274\053\230\072\266\073\123\077\267\100\132" + "\105\134\114\051\142\045\150\053\154\271\155\044\157" + "\277\160\176\161\270\162\050\165\111\166\047\167\154" + "\170\144\001\002\000\064\031\125\032\151\033\155\034" + "\156\044\106\047\274\053\230\072\266\073\123\077\267" + "\100\132\105\134\114\051\142\045\150\053\154\271\155" + "\044\157\277\160\176\161\270\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\010\144\u0144\145\u0142\146" + "\u0143\001\uff17\000\010\144\u0144\145\u0142\146\u0143\001\uff18" + "\000\010\144\u0144\145\u0142\146\u0143\001\uff11\000\010\144" + "\u0144\145\u0142\146\u0143\001\uff16\000\010\144\u0144\145\u0142" + "\146\u0143\001\uff10\000\010\144\u0144\145\u0142\146\u0143\001" + "\uff0f\000\010\144\u0144\145\u0142\146\u0143\001\uff0e\000\010" + "\144\u0144\145\u0142\146\u0143\001\uff15\000\010\144\u0144\145" + "\u0142\146\u0143\001\uff14\000\010\144\u0144\145\u0142\146\u0143" + "\001\uff19\000\010\144\u0144\145\u0142\146\u0143\001\uff12\000" + "\010\144\u0144\145\u0142\146\u0143\001\uff13\000\002\001\uff2e" + "\000\010\144\u0144\145\u0142\146\u0143\001\uff0b\000\010\144" + "\u0144\145\u0142\146\u0143\001\uff07\000\010\144\u0101\145\u0100" + "\146\u0102\001\uff09\000\002\001\uff1d\000\010\144\u0101\145" + "\u0100\146\u0102\001\uff0a\000\002\001\uff1e\000\012\045\250" + "\052\u0114\100\247\165\111\001\002\000\002\001\uff51\000" + "\120\031\125\032\151\033\155\034\156\036\131\037\201" + "\044\106\047\215\053\230\072\225\073\123\077\172\100" + "\132\102\222\103\211\104\160\105\134\112\157\113\217" + "\114\051\115\141\124\121\125\161\142\205\143\204\150" + "\053\152\166\153\212\154\167\155\044\156\203\157\126" + "\160\176\161\142\162\050\165\111\166\047\167\154\170" + "\144\001\uff5a\000\004\137\u0174\001\002\000\002\001\ufeb8" + "\000\120\031\125\032\151\033\155\034\156\036\u013d\037" + "\201\044\106\047\274\053\230\072\266\073\123\077\267" + "\100\132\102\222\103\211\104\u013e\105\134\112\157\113" + "\u013c\114\051\115\u0135\124\121\125\u013b\142\u0133\143\u013f" + "\150\053\152\166\153\u0134\154\271\155\044\156\203\157" + "\277\160\176\161\270\162\050\165\111\166\047\167\154" + "\170\144\001\002\000\004\074\u0178\001\uff49\000\002\001" + "\uff4b\000\102\031\125\032\151\033\155\034\156\036\u013d" + "\044\106\047\274\053\230\072\266\073\123\077\267\100" + "\132\104\u013e\105\134\113\u013c\114\051\115\u0135\125\u013b" + "\142\u0133\143\u013f\150\053\153\u0134\154\271\155\044\157" + "\277\160\176\161\270\162\050\165\111\166\047\167\154" + "\170\144\001\002\000\064\031\125\032\151\033\155\034" + "\156\044\106\047\215\053\230\072\225\073\123\077\172" + "\100\132\105\134\114\051\142\045\150\053\154\167\155" + "\044\157\126\160\176\161\142\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\064\031\125\032\151\033" + "\155\034\156\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\105\134\114\051\142\045\150\053\154" + "\167\155\044\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\064\031\125\032" + "\151\033\155\034\156\044\106\047\215\053\230\072\225" + "\073\123\077\172\100\132\105\134\114\051\142\045\150" + "\053\154\167\155\044\157\126\160\176\161\142\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\064\031" + "\125\032\151\033\155\034\156\044\106\047\215\053\230" + "\072\225\073\123\077\172\100\132\105\134\114\051\142" + "\045\150\053\154\167\155\044\157\126\160\176\161\142" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\064\031\125\032\151\033\155\034\156\044\106\047\215" + "\053\230\072\225\073\123\077\172\100\132\105\134\114" + "\051\142\045\150\053\154\167\155\044\157\126\160\176" + "\161\142\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\064\031\125\032\151\033\155\034\156\044\106" + "\047\215\053\230\072\225\073\123\077\172\100\132\105" + "\134\114\051\142\045\150\053\154\167\155\044\157\126" + "\160\176\161\142\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\064\031\125\032\151\033\155\034\156" + "\044\106\047\215\053\230\072\225\073\123\077\172\100" + "\132\105\134\114\051\142\045\150\053\154\167\155\044" + "\157\126\160\176\161\142\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\064\031\125\032\151\033\155" + "\034\156\044\106\047\215\053\230\072\225\073\123\077" + "\172\100\132\105\134\114\051\142\045\150\053\154\167" + "\155\044\157\126\160\176\161\142\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\064\031\125\032\151" + "\033\155\034\156\044\106\047\215\053\230\072\225\073" + "\123\077\172\100\132\105\134\114\051\142\045\150\053" + "\154\167\155\044\157\126\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\064\031\125" + "\032\151\033\155\034\156\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\105\134\114\051\142\045" + "\150\053\154\167\155\044\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\064" + "\031\125\032\151\033\155\034\156\044\106\047\215\053" + "\230\072\225\073\123\077\172\100\132\105\134\114\051" + "\142\045\150\053\154\167\155\044\157\126\160\176\161" + "\142\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\064\031\125\032\151\033\155\034\156\044\106\047" + "\215\053\230\072\225\073\123\077\172\100\132\105\134" + "\114\051\142\045\150\053\154\167\155\044\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\010\144\u0101\145\u0100\146\u0102\001\uff17\000" + "\002\001\uff2b\000\010\144\u0101\145\u0100\146\u0102\001\uff18" + "\000\002\001\uff2c\000\010\144\u0101\145\u0100\146\u0102\001" + "\uff11\000\002\001\uff25\000\010\144\u0101\145\u0100\146\u0102" + "\001\uff16\000\002\001\uff2a\000\010\144\u0101\145\u0100\146" + "\u0102\001\uff10\000\002\001\uff24\000\010\144\u0101\145\u0100" + "\146\u0102\001\uff0f\000\002\001\uff23\000\010\144\u0101\145" + "\u0100\146\u0102\001\uff0e\000\002\001\uff22\000\010\144\u0101" + "\145\u0100\146\u0102\001\uff15\000\002\001\uff29\000\010\144" + "\u0101\145\u0100\146\u0102\001\uff19\000\002\001\uff2d\000\010" + "\144\u0101\145\u0100\146\u0102\001\uff12\000\002\001\uff26\000" + "\010\144\u0101\145\u0100\146\u0102\001\uff14\000\002\001\uff28" + "\000\010\144\u0101\145\u0100\146\u0102\001\uff13\000\002\001" + "\uff27\000\002\001\ufead\000\002\001\ufeaa\000\002\001\uff31" + "\000\002\001\uff30\000\100\031\125\032\151\033\155\034" + "\310\037\201\044\106\047\274\053\312\073\123\077\311" + "\100\132\102\222\103\211\105\134\112\157\114\051\124" + "\121\142\045\150\053\152\166\154\271\155\044\156\203" + "\157\313\160\176\161\270\162\050\165\111\166\047\167" + "\154\170\144\001\002\000\002\001\ufeb4\000\100\031\125" + "\032\151\033\155\034\156\037\201\044\106\047\274\053" + "\230\073\123\077\303\100\132\102\222\103\211\105\134" + "\112\157\114\051\124\121\142\045\150\053\152\166\154" + "\271\155\044\156\203\157\304\160\176\161\270\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\002\001" + "\ufebf\000\004\140\u01a6\001\002\000\002\001\ufe9c\000\010" + "\142\057\160\052\166\047\001\002\000\010\142\057\160" + "\052\166\047\001\002\000\006\051\u01c1\052\103\001\002" + "\000\014\045\250\052\u01bb\100\247\136\u01bd\165\111\001" + "\002\000\012\101\232\142\057\160\052\166\047\001\002" + "\000\002\001\uff6c\000\006\051\uff8c\052\uff8c\001\uff9d\000" + "\012\053\u01af\142\057\160\052\166\047\001\002\000\010" + "\142\057\160\052\166\047\001\002\000\006\051\105\052" + "\103\001\002\000\006\051\u01b2\052\103\001\002\000\120" + "\031\125\032\151\033\155\034\156\036\131\037\201\044" + "\106\047\215\053\u01b4\072\225\073\123\077\172\100\132" + "\102\222\103\211\104\160\105\134\112\157\113\217\114" + "\051\115\141\124\121\125\161\142\205\143\204\150\053" + "\152\166\153\212\154\167\155\044\156\203\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\002\001\uff83\000\122\031\125\032\151\033" + "\155\034\156\036\131\037\201\044\106\047\215\053\230" + "\072\225\073\123\077\172\100\132\101\232\102\222\103" + "\211\104\160\105\134\112\157\113\217\114\051\115\141" + "\124\121\125\161\142\205\143\204\150\053\152\166\153" + "\212\154\167\155\044\156\203\157\126\160\176\161\142" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\002\001\uff7d\000\006\051\u01b7\052\103\001\002\000\120" + "\031\125\032\151\033\155\034\156\036\131\037\201\044" + "\106\047\215\053\u01b9\072\225\073\123\077\172\100\132" + "\102\222\103\211\104\160\105\134\112\157\113\217\114" + "\051\115\141\124\121\125\161\142\205\143\204\150\053" + "\152\166\153\212\154\167\155\044\156\203\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\002\001\uff84\000\122\031\125\032\151\033" + "\155\034\156\036\131\037\201\044\106\047\215\053\230" + "\072\225\073\123\077\172\100\132\101\232\102\222\103" + "\211\104\160\105\134\112\157\113\217\114\051\115\141" + "\124\121\125\161\142\205\143\204\150\053\152\166\153" + "\212\154\167\155\044\156\203\157\126\160\176\161\142" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\002\001\uff7e\000\020\053\u01bf\062\u01a7\130\u01a8\134\u01ae" + "\142\057\160\052\166\047\001\002\000\004\136\u01be\001" + "\002\000\002\001\ufe97\000\002\001\ufe98\000\010\142\057" + "\160\052\166\047\001\002\000\002\001\uff6d\000\120\031" + "\125\032\151\033\155\034\156\036\131\037\201\044\106" + "\047\215\053\u01c3\072\225\073\123\077\172\100\132\102" + "\222\103\211\104\160\105\134\112\157\113\217\114\051" + "\115\141\124\121\125\161\142\205\143\204\150\053\152" + "\166\153\212\154\167\155\044\156\203\157\126\160\176" + "\161\142\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\002\001\uff81\000\122\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\101\232\102\222\103\211" + "\104\160\105\134\112\157\113\217\114\051\115\141\124" + "\121\125\161\142\205\143\204\150\053\152\166\153\212" + "\154\167\155\044\156\203\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\uff7b\000\006\051\u01c6\052\103\001\002\000\120\031" + "\125\032\151\033\155\034\156\036\131\037\201\044\106" + "\047\215\053\u01c8\072\225\073\123\077\172\100\132\102" + "\222\103\211\104\160\105\134\112\157\113\217\114\051" + "\115\141\124\121\125\161\142\205\143\204\150\053\152" + "\166\153\212\154\167\155\044\156\203\157\126\160\176" + "\161\142\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\002\001\uff86\000\122\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\101\232\102\222\103\211" + "\104\160\105\134\112\157\113\217\114\051\115\141\124" + "\121\125\161\142\205\143\204\150\053\152\166\153\212" + "\154\167\155\044\156\203\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\uff80\000\006\051\u01cb\052\103\001\002\000\120\031" + "\125\032\151\033\155\034\156\036\131\037\201\044\106" + "\047\215\053\u01cd\072\225\073\123\077\172\100\132\102" + "\222\103\211\104\160\105\134\112\157\113\217\114\051" + "\115\141\124\121\125\161\142\205\143\204\150\053\152" + "\166\153\212\154\167\155\044\156\203\157\126\160\176" + "\161\142\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\002\001\uff85\000\122\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\230\072" + "\225\073\123\077\172\100\132\101\232\102\222\103\211" + "\104\160\105\134\112\157\113\217\114\051\115\141\124" + "\121\125\161\142\205\143\204\150\053\152\166\153\212" + "\154\167\155\044\156\203\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\uff7f\000\010\144\u0101\145\u0100\146\u0102\001\uff0d\000" + "\002\001\uff21\000\002\001\ufee6\000\002\001\ufee9\000\100" + "\031\125\032\151\033\155\034\156\037\201\044\106\047" + "\274\053\230\073\123\077\303\100\132\102\222\103\211" + "\105\134\112\157\114\051\124\121\142\045\150\053\152" + "\166\154\271\155\044\156\203\157\304\160\176\161\270" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\002\001\ufedf\000\012\045\250\052\u0114\100\247\165\111" + "\001\002\000\002\001\uff4e\000\100\031\125\032\151\033" + "\155\034\156\037\201\044\106\047\274\053\230\073\123" + "\077\303\100\132\102\222\103\211\105\134\112\157\114" + "\051\124\121\142\045\150\053\152\166\154\271\155\044" + "\156\203\157\304\160\176\161\270\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\100\031\125\032\151" + "\033\155\034\156\037\201\044\106\047\274\053\230\073" + "\123\077\303\100\132\102\222\103\211\105\134\112\157" + "\114\051\124\121\142\045\150\053\152\166\154\271\155" + "\044\156\203\157\304\160\176\161\270\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\002\001\ufec7\000" + "\002\001\ufec3\000\120\031\125\032\151\033\155\034\156" + "\036\131\037\201\044\106\047\215\053\230\072\225\073" + "\123\077\172\100\132\102\222\103\211\104\160\105\134" + "\112\157\113\217\114\051\115\141\124\121\125\161\142" + "\205\143\204\150\053\152\166\153\212\154\167\155\044" + "\156\203\157\126\160\176\161\142\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\120\031\125\032\151" + "\033\155\034\156\036\u013d\037\201\044\106\047\274\053" + "\230\072\266\073\123\077\267\100\132\102\222\103\211" + "\104\u013e\105\134\112\157\113\u013c\114\051\115\u0135\124" + "\121\125\u013b\142\u0133\143\u013f\150\053\152\166\153\u0134" + "\154\271\155\044\156\203\157\277\160\176\161\270\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\uff35\000\002\001\uff3f\000\002\001\uff3d\000\004\056" + "\u01e1\001\uff3c\000\120\031\125\032\151\033\155\034\156" + "\036\131\037\201\044\106\047\215\053\230\072\225\073" + "\123\077\172\100\132\102\222\103\211\104\160\105\134" + "\112\157\113\217\114\051\115\141\124\121\125\161\142" + "\205\143\204\150\053\152\166\153\212\154\167\155\044" + "\156\203\157\126\160\176\161\142\162\050\165\111\166" + "\047\167\154\170\144\001\002\000\002\001\uff3e\000\002" + "\001\uff41\000\002\001\uff40\000\120\031\125\032\151\033" + "\155\034\156\036\131\037\201\044\106\047\215\053\230" + "\072\225\073\123\077\172\100\132\102\222\103\211\104" + "\160\105\134\112\157\113\217\114\051\115\141\124\121" + "\125\161\142\205\143\204\150\053\152\166\153\212\154" + "\167\155\044\156\203\157\126\160\176\161\142\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\122\031" + "\125\032\151\033\155\034\156\036\131\037\201\044\106" + "\047\215\053\230\072\225\073\123\077\172\100\132\102" + "\222\103\211\104\160\105\134\112\157\113\217\114\051" + "\115\141\124\121\125\161\136\u01e7\142\205\143\204\150" + "\053\152\166\153\212\154\167\155\044\156\203\157\126" + "\160\176\161\142\162\050\165\111\166\047\167\154\170" + "\144\001\002\000\002\001\uff61\000\002\001\ufe9a\000\002" + "\001\uff75\000\122\031\125\032\151\033\155\034\156\036" + "\131\037\201\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\101\232\102\222\103\211\104\160\105" + "\134\112\157\113\217\114\051\115\141\124\121\125\161" + "\142\205\143\204\150\053\152\166\153\212\154\167\155" + "\044\156\203\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\002\001\uff6f\000" + "\002\001\uff8b\000\010\051\u01b2\052\103\060\u01ee\001\002" + "\000\120\031\125\032\151\033\155\034\156\036\131\037" + "\201\044\106\047\215\053\u01f0\072\225\073\123\077\172" + "\100\132\102\222\103\211\104\160\105\134\112\157\113" + "\217\114\051\115\141\124\121\125\161\142\205\143\204" + "\150\053\152\166\153\212\154\167\155\044\156\203\157" + "\126\160\176\161\142\162\050\165\111\166\047\167\154" + "\170\144\001\002\000\002\001\uff76\000\122\031\125\032" + "\151\033\155\034\156\036\131\037\201\044\106\047\215" + "\053\230\072\225\073\123\077\172\100\132\101\232\102" + "\222\103\211\104\160\105\134\112\157\113\217\114\051" + "\115\141\124\121\125\161\142\205\143\204\150\053\152" + "\166\153\212\154\167\155\044\156\203\157\126\160\176" + "\161\142\162\050\165\111\166\047\167\154\170\144\001" + "\002\000\002\001\uff70\000\002\001\uff66\000\004\051\u01f4" + "\001\002\000\120\031\125\032\151\033\155\034\156\036" + "\131\037\201\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\102\222\103\211\104\160\105\134\112" + "\157\113\217\114\051\115\141\124\121\125\161\142\205" + "\143\204\150\053\152\166\153\212\154\167\155\044\156" + "\203\157\126\160\176\161\142\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\006\100\247\165\111\001" + "\002\000\002\001\uffb5\000\120\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\u01f9\072" + "\225\073\123\077\172\100\132\102\222\103\211\104\160" + "\105\134\112\157\113\217\114\051\115\141\124\121\125" + "\161\142\205\143\204\150\053\152\166\153\212\154\167" + "\155\044\156\203\157\126\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\002\001\uff74" + "\000\122\031\125\032\151\033\155\034\156\036\131\037" + "\201\044\106\047\215\053\230\072\225\073\123\077\172" + "\100\132\101\232\102\222\103\211\104\160\105\134\112" + "\157\113\217\114\051\115\141\124\121\125\161\142\205" + "\143\204\150\053\152\166\153\212\154\167\155\044\156" + "\203\157\126\160\176\161\142\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\002\001\uff6e\000\022\052" + "\077\053\067\062\071\130\070\134\100\142\057\160\052" + "\166\047\001\uff69\000\002\001\uff67\000\010\051\u01cb\052" + "\103\060\u01fe\001\002\000\120\031\125\032\151\033\155" + "\034\156\036\131\037\201\044\106\047\215\053\u0200\072" + "\225\073\123\077\172\100\132\102\222\103\211\104\160" + "\105\134\112\157\113\217\114\051\115\141\124\121\125" + "\161\142\205\143\204\150\053\152\166\153\212\154\167" + "\155\044\156\203\157\126\160\176\161\142\162\050\165" + "\111\166\047\167\154\170\144\001\002\000\002\001\uff78" + "\000\122\031\125\032\151\033\155\034\156\036\131\037" + "\201\044\106\047\215\053\230\072\225\073\123\077\172" + "\100\132\101\232\102\222\103\211\104\160\105\134\112" + "\157\113\217\114\051\115\141\124\121\125\161\142\205" + "\143\204\150\053\152\166\153\212\154\167\155\044\156" + "\203\157\126\160\176\161\142\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\002\001\uff72\000\010\051" + "\u01c6\052\103\060\u0203\001\002\000\120\031\125\032\151" + "\033\155\034\156\036\131\037\201\044\106\047\215\053" + "\u0205\072\225\073\123\077\172\100\132\102\222\103\211" + "\104\160\105\134\112\157\113\217\114\051\115\141\124" + "\121\125\161\142\205\143\204\150\053\152\166\153\212" + "\154\167\155\044\156\203\157\126\160\176\161\142\162" + "\050\165\111\166\047\167\154\170\144\001\002\000\002" + "\001\uff79\000\122\031\125\032\151\033\155\034\156\036" + "\131\037\201\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\101\232\102\222\103\211\104\160\105" + "\134\112\157\113\217\114\051\115\141\124\121\125\161" + "\142\205\143\204\150\053\152\166\153\212\154\167\155" + "\044\156\203\157\126\160\176\161\142\162\050\165\111" + "\166\047\167\154\170\144\001\002\000\002\001\uff73\000" + "\010\051\u01b7\052\103\060\u0208\001\002\000\120\031\125" + "\032\151\033\155\034\156\036\131\037\201\044\106\047" + "\215\053\u020a\072\225\073\123\077\172\100\132\102\222" + "\103\211\104\160\105\134\112\157\113\217\114\051\115" + "\141\124\121\125\161\142\205\143\204\150\053\152\166" + "\153\212\154\167\155\044\156\203\157\126\160\176\161" + "\142\162\050\165\111\166\047\167\154\170\144\001\002" + "\000\002\001\uff77\000\122\031\125\032\151\033\155\034" + "\156\036\131\037\201\044\106\047\215\053\230\072\225" + "\073\123\077\172\100\132\101\232\102\222\103\211\104" + "\160\105\134\112\157\113\217\114\051\115\141\124\121" + "\125\161\142\205\143\204\150\053\152\166\153\212\154" + "\167\155\044\156\203\157\126\160\176\161\142\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\002\001" + "\uff71\000\004\140\u020d\001\002\000\004\051\u020e\001\002" + "\000\120\031\125\032\151\033\155\034\156\036\131\037" + "\201\044\106\047\215\053\230\072\225\073\123\077\172" + "\100\132\102\222\103\211\104\160\105\134\112\157\113" + "\217\114\051\115\141\124\121\125\161\142\205\143\204" + "\150\053\152\166\153\212\154\167\155\044\156\203\157" + "\126\160\176\161\142\162\050\165\111\166\047\167\154" + "\170\144\001\002\000\006\100\247\165\111\001\002\000" + "\002\001\uffb6\000\006\100\247\165\111\001\002\000\002" + "\001\uffb4\000\120\031\125\032\151\033\155\034\156\036" + "\131\037\201\044\106\047\215\053\230\072\225\073\123" + "\077\172\100\132\102\222\103\211\104\160\105\134\112" + "\157\113\217\114\051\115\141\124\121\125\161\142\205" + "\143\204\150\053\152\166\153\212\154\167\155\044\156" + "\203\157\126\160\176\161\142\162\050\165\111\166\047" + "\167\154\170\144\001\002\000\022\052\077\053\067\062" + "\071\130\070\134\100\142\057\160\052\166\047\001\uff69" + "\000\022\052\077\053\067\062\071\130\070\134\100\142" + "\057\160\052\166\047\001\uff69\000\004\137\u0217\001\002" + "\000\004\051\u0218\001\002\000\120\031\125\032\151\033" + "\155\034\156\036\131\037\201\044\106\047\215\053\230" + "\072\225\073\123\077\172\100\132\102\222\103\211\104" + "\160\105\134\112\157\113\217\114\051\115\141\124\121" + "\125\161\142\205\143\204\150\053\152\166\153\212\154" + "\167\155\044\156\203\157\126\160\176\161\142\162\050" + "\165\111\166\047\167\154\170\144\001\002\000\006\100" + "\247\165\111\001\002\000\002\001\uffb8\000\004\140\u021c" + "\001\002\000\004\051\u021d\001\002\000\120\031\125\032" + "\151\033\155\034\156\036\131\037\201\044\106\047\215" + "\053\230\072\225\073\123\077\172\100\132\102\222\103" + "\211\104\160\105\134\112\157\113\217\114\051\115\141" + "\124\121\125\161\142\205\143\204\150\053\152\166\153" + "\212\154\167\155\044\156\203\157\126\160\176\161\142" + "\162\050\165\111\166\047\167\154\170\144\001\002\000" + "\006\100\247\165\111\001\002\000\002\001\uffb9\000\006" + "\100\247\165\111\001\002\000\002\001\uffb7\000\006\042" + "\u0223\101\u0224\001\ufffd\000\010\142\057\160\052\166\047" + "\001\002\000\020\114\051\142\045\150\053\155\044\160" + "\052\162\050\166\047\001\uff97\000\004\137\u022a\001\002" + "\000\004\052\u0228\001\uff96\000\002\001\uff95\000\020\114" + "\051\142\045\150\053\155\044\160\052\162\050\166\047" + "\001\002\000\002\001\uff94\000\004\042\u022b\001\ufffb\000" + "\010\142\057\160\052\166\047\001\002\000\002\001\ufffa" + "\000\002\001\ufffc\000\012\100\247\101\u023d\105\u023c\165" + "\111\001\uff9d\000\004\055\u0230\001\002\000\010\142\057" + "\160\052\166\047\001\002\000\012\100\247\101\u0234\105" + "\u0233\165\111\001\002\000\002\001\uffae\000\022\052\077" + "\053\067\062\071\130\070\134\100\142\057\160\052\166" + "\047\001\uff69\000\022\052\077\053\067\062\071\130\070" + "\134\100\142\057\160\052\166\047\001\uff69\000\004\137" + "\u0236\001\002\000\006\100\247\165\111\001\002\000\002" + "\001\uffaf\000\004\140\u0239\001\002\000\006\100\247\165" + "\111\001\002\000\002\001\uffb0\000\002\001\uffb1\000\022" + "\052\077\053\067\062\071\130\070\134\100\142\057\160" + "\052\166\047\001\uff69\000\022\052\077\053\067\062\071" + "\130\070\134\100\142\057\160\052\166\047\001\uff69\000" + "\004\137\u023f\001\002\000\006\100\247\165\111\001\002" + "\000\002\001\uffb2\000\004\140\u0242\001\002\000\006\100" + "\247\165\111\001\002\000\002\001\uffb3\000\006\100\247" + "\165\111\001\uff9d\000\004\055\u0246\001\002\000\010\142" + "\057\160\052\166\047\001\002\000\006\100\247\165\111" + "\001\002\000\002\001\uffad\000\002\001\uffac\000\014\060" + "\u024b\100\247\101\u024f\105\u024e\165\111\001\002\000\120" + "\031\125\032\151\033\155\034\156\036\131\037\201\044" + "\106\047\215\053\230\072\225\073\123\077\172\100\132" + "\102\222\103\211\104\160\105\134\112\157\113\217\114" + "\051\115\141\124\121\125\161\142\205\143\204\150\053" + "\152\166\153\212\154\167\155\044\156\203\157\126\160" + "\176\161\142\162\050\165\111\166\047\167\154\170\144" + "\001\002\000\002\001\uffbc\000\002\001\uffbb\000\012\140" + "\u0255\142\057\160\052\166\047\001\002\000\012\137\u0251" + "\142\057\160\052\166\047\001\002\000\006\052\103\137" + "\u0253\001\002\000\010\060\u024b\100\247\165\111\001\002" + "\000\002\001\uffbd\000\010\060\u024b\100\247\165\111\001" + "\002\000\002\001\uffbe\000\010\060\u024b\100\247\165\111" + "\001\002\000\006\052\103\140\u0257\001\002\000\010\060" + "\u024b\100\247\165\111\001\002\000\002\001\uffc0\000\002" + "\001\uffbf\000\002\001\uffba\000\004\100\u025c\001\002\000" + "\012\136\u025e\142\057\160\052\166\047\001\002\000\006" + "\052\103\136\u025f\001\002\000\002\001\ufff8\000\002\001" + "\ufff9\000\006\050\020\141\025\001\002\000\014\100\247" + "\142\057\160\052\165\111\166\047\001\002\000\016\066" + "\u0265\100\247\142\057\160\052\165\111\166\047\001\uffd2" + "\000\004\066\u0265\001\uffd2\000\004\063\u0287\001\uffd7\000" + "\006\061\u0266\167\u0269\001\002\000\004\167\u027e\001\002" + "\000\022\077\u0277\114\u027c\142\u027a\150\u027d\155\u0279\160" + "\052\162\u027b\166\047\001\002\000\004\052\u0274\001\uffd3" + "\000\030\046\u026c\051\u026b\055\u026d\077\uffc4\114\uffc4\142" + "\uffc4\150\uffc4\155\uffc4\160\uffc4\162\uffc4\166\uffc4\001\uffd5" + "\000\002\001\uffd1\000\004\167\u0276\001\002\000\006\061" + "\u0266\167\u0273\001\002\000\004\055\u026e\001\002\000\004" + "\167\u026f\001\002\000\004\051\u0270\001\uffc3\000\004\167" + "\u0271\001\002\000\002\001\uffc2\000\004\052\u0274\001\uffd4" + "\000\006\051\u026b\055\u026d\001\uffc4\000\006\061\u0266\167" + "\u0273\001\002\000\002\001\uffd0\000\002\001\uffc1\000\002" + "\001\uffcd\000\002\001\uffcf\000\002\001\uffca\000\004\151" + "\060\001\uffcc\000\002\001\uffcb\000\002\001\uffc9\000\002" + "\001\uffce\000\006\051\u027f\055\u0280\001\uffc8\000\004\167" + "\u0285\001\002\000\004\055\u0281\001\002\000\004\167\u0282" + "\001\002\000\004\051\u0283\001\uffc7\000\004\167\u0284\001" + "\002\000\002\001\uffc6\000\002\001\uffc5\000\002\001\uffe4" + "\000\004\167\u0288\001\002\000\002\001\uffd6\000\004\066" + "\u0265\001\uffd2\000\004\066\u0265\001\uffd2\000\004\063\u0287" + "\001\uffd7\000\002\001\uffe0\000\004\063\u0287\001\uffd7\000" + "\002\001\uffe5\000\004\063\u0287\001\uffd7\000\002\001\uffe1" + "\000\012\052\103\060\u0294\064\u0293\076\u0292\001\uff9e\000" + "\020\114\051\142\045\150\053\155\044\160\052\162\050" + "\166\047\001\002\000\020\114\051\142\045\150\053\155" + "\044\160\052\162\050\166\047\001\002\000\020\114\051" + "\142\045\150\053\155\044\160\052\162\050\166\047\001" + "\002\000\004\100\u0296\001\002\000\022\052\077\053\067" + "\062\071\130\070\134\100\142\057\160\052\166\047\001" + "\uff69\000\004\136\u0298\001\002\000\006\100\247\165\111" + "\001\uff63\000\002\001\uffa9\000\002\001\uff62\000\004\131" + "\u029d\001\uff9f\000\002\001\uff93\000\020\114\051\142\045" + "\150\053\155\044\160\052\162\050\166\047\001\002\000" + "\002\001\uff92\000\002\001\uffa1\000\004\131\u029d\001\uffa0" + "\000\004\101\u02a2\001\uffff\000\012\061\u02a4\142\057\160" + "\052\166\047\001\002\000\002\001\uff8a\000\010\142\057" + "\160\052\166\047\001\002\000\006\052\u02a6\137\u02a7\001" + "\002\000\012\061\u02a9\142\057\160\052\166\047\001\002" + "\000\002\001\ufffe\000\002\001\uff88\000\010\142\057\160" + "\052\166\047\001\002\000\002\001\uff87\000\002\001\uff89" + "\000\002\001\uffa2\000\002\001\uffa4\000\006\100\247\165" + "\111\001\002\000\006\100\247\165\111\001\002\000\002" + "\001\ufff7\000\002\001\ufff6\000\002\001\ufff5\000\016\066" + "\u0265\100\247\142\057\160\052\165\111\166\047\001\uffd2" + "\000\004\066\u0265\001\uffd2\000\004\063\u0287\001\uffd7\000" + "\002\001\uffe6\000\004\066\u0265\001\uffd2\000\004\066\u0265" + "\001\uffd2\000\004\063\u0287\001\uffd7\000\002\001\uffe2\000" + "\004\063\u0287\001\uffd7\000\002\001\uffe7\000\004\063\u0287" + "\001\uffd7\000\002\001\uffe3\000\006\100\247\165\111\001" + "\002\000\006\100\247\165\111\001\002\000\002\001\ufff4" + "\000\002\001\ufff3\000\002\001\ufff2\000\014\100\247\142" + "\057\160\052\165\111\166\047\001\002\000\004\075\u02c6" + "\001\002\000\006\050\020\141\025\001\002\000\014\100" + "\247\142\057\160\052\165\111\166\047\001\002\000\016" + "\066\u0265\100\247\142\057\160\052\165\111\166\047\001" + "\uffd2\000\004\066\u0265\001\uffd2\000\004\063\u0287\001\uffd7" + "\000\004\075\uffe4\001\uffdc\000\004\066\u0265\001\uffd2\000" + "\004\066\u0265\001\uffd2\000\004\063\u0287\001\uffd7\000\004" + "\075\uffe0\001\uffd8\000\004\063\u0287\001\uffd7\000\004\075" + "\uffe5\001\uffdd\000\004\063\u0287\001\uffd7\000\004\075\uffe1" + "\001\uffd9\000\016\066\u0265\100\247\142\057\160\052\165" + "\111\166\047\001\uffd2\000\004\066\u0265\001\uffd2\000\004" + "\063\u0287\001\uffd7\000\004\075\uffe6\001\uffde\000\004\066" + "\u0265\001\uffd2\000\004\066\u0265\001\uffd2\000\004\063\u0287" + "\001\uffd7\000\004\075\uffe2\001\uffda\000\004\063\u0287\001" + "\uffd7\000\004\075\uffe7\001\uffdf\000\004\063\u0287\001\uffd7" + "\000\004\075\uffe3\001\uffdb\000\002\001\000"
    });

    /** Access to parse-action table. */
    @Override
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table. */
    protected static final short[][] _reduce_table = unpackFromStrings(new String[] {
                                                                                     "\000\u02de\000\006\106\003\107\004\001\001\000\002\001" + "\001\000\030\012\026\013\014\037\015\051\011\067\006" + "\076\020\100\022\101\025\123\033\124\032\125\021\001" + "\001\000\002\001\001\000\002\001\001\000\006\012\u02c4" + "\013\u02c3\001\001\000\010\031\u02c0\053\u02bf\054\045\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\010\031\u02b3\053\u02b2\054\045\001\001\000\002\001" + "\001\000\010\031\u02af\053\u02ae\054\045\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\006\100" + "\022\101\u02ab\001\001\000\006\053\u02a0\054\045\001\001" + "\000\002\001\001\000\010\053\071\054\045\055\u0290\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\006\053\u025a\054\045\001\001\000\006\053\u0249\054\045" + "\001\001\000\010\053\u0243\054\045\102\u0244\001\001\000" + "\010\053\u022d\054\045\102\u022e\001\001\000\006\053\u0221" + "\054\045\001\001\000\010\053\042\054\045\102\053\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\006\053\055\054\045\001\001\000\002\001" + "\001\000\002\001\001\000\004\054\060\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\140\002" + "\113\003\112\004\172\005\111\006\137\007\136\010\147" + "\011\146\021\115\022\114\023\207\024\206\025\162\026" + "\161\030\u0210\031\215\040\107\041\106\042\213\043\212" + "\044\223\045\222\046\201\047\177\053\205\054\045\057" + "\127\060\126\061\117\062\116\063\152\064\151\065\123" + "\066\121\070\135\071\134\073\164\074\163\102\142\113" + "\145\114\144\115\176\116\174\117\220\120\217\121\170" + "\122\167\001\001\000\016\014\073\015\072\017\u020b\053" + "\071\054\045\055\074\001\001\000\016\014\073\015\072" + "\017\075\053\071\054\045\055\074\001\001\000\010\053" + "\071\054\045\055\u0206\001\001\000\010\053\071\054\045" + "\055\u0201\001\001\000\010\053\071\054\045\055\u01fc\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\016\014\073\015" + "\072\017\u01f1\053\071\054\045\055\074\001\001\000\010" + "\053\071\054\045\055\101\001\001\000\010\053\071\054" + "\045\055\u01ec\001\001\000\002\001\001\000\006\053\u01eb" + "\054\045\001\001\000\140\002\113\003\112\004\172\005" + "\111\006\137\007\136\010\147\011\146\021\115\022\114" + "\023\207\024\206\025\162\026\161\030\u01e8\031\215\040" + "\107\041\106\042\213\043\212\044\223\045\222\046\201" + "\047\177\053\205\054\045\057\127\060\126\061\117\062" + "\116\063\152\064\151\065\123\066\121\070\135\071\134" + "\073\164\074\163\102\142\113\145\114\144\115\176\116" + "\174\117\220\120\217\121\170\122\167\001\001\000\140" + "\002\113\003\112\004\172\005\111\006\137\007\136\010" + "\147\011\146\021\115\022\114\023\207\024\206\025\162" + "\026\161\030\132\031\215\040\107\041\106\042\213\043" + "\212\044\223\045\222\046\201\047\177\053\205\054\045" + "\057\127\060\126\061\117\062\116\063\152\064\151\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\113\145\114\144\115\176\116\174\117\220\120\217\121" + "\170\122\167\001\001\000\006\053\u01e7\054\045\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\004" + "\072\u01d7\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\016\014\073\015\u0111\016\u01d4\053\071" + "\054\045\055\074\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\062\004\172" + "\005\u01d1\006\137\007\136\021\115\022\114\023\207\024" + "\206\031\215\046\201\047\177\053\205\054\045\061\u01d0" + "\062\324\065\123\066\121\070\135\071\134\073\164\074" + "\163\102\142\121\170\122\167\001\001\000\002\001\001" + "\000\002\001\001\000\074\004\172\006\137\007\136\021" + "\115\022\114\023\207\024\206\031\215\046\201\047\177" + "\053\205\054\045\061\117\062\116\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\u01cf\114\u01ce" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\150\002\113\003\112\004\172\005\111\006\137" + "\007\136\010\147\011\146\014\u01ab\020\u01a9\021\115\022" + "\114\023\207\024\206\025\162\026\161\030\253\031\215" + "\033\254\040\107\041\106\042\213\043\212\044\223\045" + "\222\046\201\047\177\053\u01ac\054\045\055\u01a8\057\127" + "\060\126\061\117\062\116\063\152\064\151\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\145" + "\114\144\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\002\001\001\000\140\002\113\003\112" + "\004\172\005\111\006\137\007\136\010\147\011\146\021" + "\115\022\114\023\207\024\206\025\162\026\161\030\u01a4" + "\031\215\040\107\041\106\042\213\043\212\044\223\045" + "\222\046\201\047\177\053\205\054\045\057\127\060\126" + "\061\117\062\116\063\152\064\151\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\145\114\144" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\106\004\172\005\u019e\006\137\007" + "\136\010\147\011\146\021\115\022\114\023\207\024\206" + "\031\215\046\201\047\177\053\205\054\045\057\u019f\060" + "\u0168\061\117\062\116\065\123\066\121\070\135\071\134" + "\073\164\074\163\102\142\113\145\114\144\115\176\116" + "\174\117\220\120\217\121\170\122\167\001\001\000\022" + "\004\172\005\u019c\031\215\053\205\054\045\102\142\121" + "\u019d\122\365\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\016\014\073\015\u0111\016\u016f\053\071\054\045" + "\055\074\001\001\000\074\004\172\006\137\007\136\021" + "\115\022\114\023\207\024\206\031\215\046\201\047\177" + "\053\205\054\045\061\117\062\116\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\u016e\114\u016d" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\074\004\172\006\137\007\136\021\115\022\114" + "\023\207\024\206\031\215\046\201\047\177\053\205\054" + "\045\061\117\062\116\065\123\066\121\070\135\071\134" + "\073\164\074\163\102\142\113\u016c\114\u016b\115\176\116" + "\174\117\220\120\217\121\170\122\167\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\016\014\073\015\u0111\016\u012f\053\071\054\045" + "\055\074\001\001\000\022\004\172\005\u012d\031\215\053" + "\205\054\045\102\142\121\u012e\122\364\001\001\000\002" + "\001\001\000\002\001\001\000\062\004\172\005\u012c\006" + "\137\007\136\021\115\022\114\023\207\024\206\031\215" + "\046\201\047\177\053\205\054\045\061\u012b\062\366\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\121\170\122\167\001\001\000\002\001\001\000\140\002" + "\113\003\112\004\172\005\111\006\137\007\136\010\147" + "\011\146\021\115\022\114\023\207\024\206\025\162\026" + "\161\030\u012a\031\215\040\107\041\106\042\213\043\212" + "\044\223\045\222\046\201\047\177\053\205\054\045\057" + "\127\060\126\061\117\062\116\063\152\064\151\065\123" + "\066\121\070\135\071\134\073\164\074\163\102\142\113" + "\145\114\144\115\176\116\174\117\220\120\217\121\170" + "\122\167\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\016\014\073\015\u0111" + "\016\u011e\053\071\054\045\055\074\001\001\000\002\001" + "\001\000\016\014\073\015\u0111\016\u011c\053\071\054\045" + "\055\074\001\001\000\074\004\172\006\137\007\136\021" + "\115\022\114\023\207\024\206\031\215\046\201\047\177" + "\053\205\054\045\061\117\062\116\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\u011b\114\u011a" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\074\004\172\006\137\007\136\021\115\022\114" + "\023\207\024\206\031\215\046\201\047\177\053\205\054" + "\045\061\117\062\116\065\123\066\121\070\135\071\134" + "\073\164\074\163\102\142\113\u0118\114\u0117\115\176\116" + "\174\117\220\120\217\121\170\122\167\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\016\014" + "\073\015\u0111\016\u0112\053\071\054\045\055\074\001\001" + "\000\074\004\172\006\137\007\136\021\115\022\114\023" + "\207\024\206\031\215\046\201\047\177\053\205\054\045" + "\061\117\062\116\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\u0110\114\u010f\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\002\001" + "\001\000\002\001\001\000\022\004\172\005\u010d\031\215" + "\053\205\054\045\102\142\121\u010e\122\333\001\001\000" + "\002\001\001\000\074\004\172\006\137\007\136\021\115" + "\022\114\023\207\024\206\031\215\046\201\047\177\053" + "\205\054\045\061\117\062\116\065\123\066\121\070\135" + "\071\134\073\164\074\163\102\142\113\376\114\375\115" + "\176\116\174\117\220\120\217\121\170\122\167\001\001" + "\000\002\001\001\000\002\001\001\000\010\050\241\053" + "\240\054\045\001\001\000\002\001\001\000\002\001\001" + "\000\062\004\172\005\230\006\137\007\136\021\115\022" + "\114\023\207\024\206\031\215\046\201\047\177\053\205" + "\054\045\061\226\062\225\065\123\066\121\070\135\071" + "\134\073\164\074\163\102\142\121\170\122\167\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\144\002\113\003\112\004\172\005\111" + "\006\137\007\136\010\147\011\146\021\115\022\114\023" + "\207\024\206\025\162\026\161\030\232\031\215\035\233" + "\036\234\040\107\041\106\042\213\043\212\044\223\045" + "\222\046\201\047\177\053\205\054\045\057\127\060\126" + "\061\117\062\116\063\152\064\151\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\145\114\144" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\140\002\113\003\112\004\172\005\111\006\137\007" + "\136\010\147\011\146\021\115\022\114\023\207\024\206" + "\025\162\026\161\030\236\031\215\040\107\041\106\042" + "\213\043\212\044\223\045\222\046\201\047\177\053\205" + "\054\045\057\127\060\126\061\117\062\116\063\152\064" + "\151\065\123\066\121\070\135\071\134\073\164\074\163" + "\102\142\113\145\114\144\115\176\116\174\117\220\120" + "\217\121\170\122\167\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\140\002" + "\113\003\112\004\172\005\111\006\137\007\136\010\147" + "\011\146\021\115\022\114\023\207\024\206\025\162\026" + "\161\030\243\031\215\040\107\041\106\042\213\043\212" + "\044\223\045\222\046\201\047\177\053\205\054\045\057" + "\127\060\126\061\117\062\116\063\152\064\151\065\123" + "\066\121\070\135\071\134\073\164\074\163\102\142\113" + "\145\114\144\115\176\116\174\117\220\120\217\121\170" + "\122\167\001\001\000\006\031\250\034\245\001\001\000" + "\010\050\257\053\240\054\045\001\001\000\002\001\001" + "\000\142\002\113\003\112\004\172\005\111\006\137\007" + "\136\010\147\011\146\021\115\022\114\023\207\024\206" + "\025\162\026\161\030\253\031\215\033\254\040\107\041" + "\106\042\213\043\212\044\223\045\222\046\201\047\177" + "\053\205\054\045\057\127\060\126\061\117\062\116\063" + "\152\064\151\065\123\066\121\070\135\071\134\073\164" + "\074\163\102\142\113\145\114\144\115\176\116\174\117" + "\220\120\217\121\170\122\167\001\001\000\140\002\113" + "\003\112\004\172\005\111\006\137\007\136\010\147\011" + "\146\021\115\022\114\023\207\024\206\025\162\026\161" + "\030\251\031\215\040\107\041\106\042\213\043\212\044" + "\223\045\222\046\201\047\177\053\205\054\045\057\127" + "\060\126\061\117\062\116\063\152\064\151\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\145" + "\114\144\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\140\002\113\003\112\004" + "\172\005\111\006\137\007\136\010\147\011\146\021\115" + "\022\114\023\207\024\206\025\162\026\161\030\256\031" + "\215\040\107\041\106\042\213\043\212\044\223\045\222" + "\046\201\047\177\053\205\054\045\057\127\060\126\061" + "\117\062\116\063\152\064\151\065\123\066\121\070\135" + "\071\134\073\164\074\163\102\142\113\145\114\144\115" + "\176\116\174\117\220\120\217\121\170\122\167\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\042\004\172\005\374\007\275\022\271\024\206\031\215" + "\047\264\053\205\054\045\062\116\066\272\071\277\074" + "\163\102\142\116\373\122\167\001\001\000\042\004\172" + "\005\372\007\275\022\271\024\206\031\215\047\264\053" + "\205\054\045\062\116\066\272\071\277\074\163\102\142" + "\116\371\122\167\001\001\000\042\004\172\005\370\007" + "\275\022\271\024\206\031\215\047\264\053\205\054\045" + "\062\116\066\272\071\277\074\163\102\142\116\367\122" + "\167\001\001\000\042\004\172\005\300\007\275\022\271" + "\024\206\031\215\047\264\053\205\054\045\062\116\066" + "\272\071\277\074\163\102\142\116\274\122\167\001\001" + "\000\002\001\001\000\036\004\172\007\275\022\271\024" + "\206\031\215\047\264\053\205\054\045\062\225\066\272" + "\071\277\074\163\102\142\122\167\001\001\000\036\004" + "\172\007\275\022\271\024\206\031\215\047\264\053\205" + "\054\045\062\366\066\272\071\277\074\163\102\142\122" + "\167\001\001\000\016\004\172\031\215\053\205\054\045" + "\102\142\122\365\001\001\000\016\004\172\031\215\053" + "\205\054\045\102\142\122\364\001\001\000\004\072\356" + "\001\001\000\002\001\001\000\016\004\172\031\215\053" + "\205\054\045\102\142\122\333\001\001\000\002\001\001" + "\000\002\001\001\000\036\004\172\007\275\022\271\024" + "\206\031\215\047\264\053\205\054\045\062\324\066\272" + "\071\277\074\163\102\142\122\167\001\001\000\002\001" + "\001\000\002\001\001\000\022\004\172\007\304\024\206" + "\031\215\053\205\054\045\102\142\122\167\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\144" + "\002\113\003\112\004\172\005\111\006\137\007\136\010" + "\147\011\146\021\115\022\114\023\207\024\206\025\162" + "\026\161\030\232\031\215\035\314\036\234\040\107\041" + "\106\042\213\043\212\044\223\045\222\046\201\047\177" + "\053\205\054\045\057\127\060\126\061\117\062\116\063" + "\152\064\151\065\123\066\121\070\135\071\134\073\164" + "\074\163\102\142\113\145\114\144\115\176\116\174\117" + "\220\120\217\121\170\122\167\001\001\000\016\004\172" + "\031\215\053\205\054\045\102\142\122\313\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\144\002\113\003\112\004\172\005\111\006\137" + "\007\136\010\147\011\146\021\115\022\114\023\207\024" + "\206\025\162\026\161\030\232\031\215\035\317\036\234" + "\040\107\041\106\042\213\043\212\044\223\045\222\046" + "\201\047\177\053\205\054\045\057\127\060\126\061\117" + "\062\116\063\152\064\151\065\123\066\121\070\135\071" + "\134\073\164\074\163\102\142\113\145\114\144\115\176" + "\116\174\117\220\120\217\121\170\122\167\001\001\000" + "\002\001\001\000\002\001\001\000\144\002\113\003\112" + "\004\172\005\111\006\137\007\136\010\147\011\146\021" + "\115\022\114\023\207\024\206\025\162\026\161\030\232" + "\031\215\035\322\036\234\040\107\041\106\042\213\043" + "\212\044\223\045\222\046\201\047\177\053\205\054\045" + "\057\127\060\126\061\117\062\116\063\152\064\151\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\113\145\114\144\115\176\116\174\117\220\120\217\121" + "\170\122\167\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\036\004\172\007\275\022\271\024" + "\206\031\215\047\264\053\205\054\045\062\332\066\272" + "\071\277\074\163\102\142\122\167\001\001\000\036\004" + "\172\007\275\022\271\024\206\031\215\047\264\053\205" + "\054\045\062\331\066\272\071\277\074\163\102\142\122" + "\167\001\001\000\036\004\172\007\275\022\271\024\206" + "\031\215\047\264\053\205\054\045\062\330\066\272\071" + "\277\074\163\102\142\122\167\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\032\004\172\007\275\022\271\024\206\031\215\047\335" + "\053\205\054\045\071\277\074\163\102\142\122\167\001" + "\001\000\002\001\001\000\030\004\172\007\275\022\271" + "\024\206\031\215\053\205\054\045\071\277\074\337\102" + "\142\122\167\001\001\000\002\001\001\000\024\004\172" + "\007\275\024\206\031\215\053\205\054\045\071\363\102" + "\142\122\167\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\030\004\172\007\275\022\271" + "\024\206\031\215\053\205\054\045\071\277\074\362\102" + "\142\122\167\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\044\004\172\005\u010c\007\275\022" + "\271\024\206\031\215\047\264\053\205\054\045\062\116" + "\066\272\071\277\074\163\102\142\116\u0103\120\u010b\122" + "\167\001\001\000\044\004\172\005\u010a\007\275\022\271" + "\024\206\031\215\047\264\053\205\054\045\062\116\066" + "\272\071\277\074\163\102\142\116\u0103\120\u0109\122\167" + "\001\001\000\044\004\172\005\u0104\007\275\022\271\024" + "\206\031\215\047\264\053\205\054\045\062\116\066\272" + "\071\277\074\163\102\142\116\u0103\120\u0102\122\167\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\040\004\172\007\275\022\271\024\206\031\215\047" + "\264\053\205\054\045\062\116\066\272\071\277\074\163" + "\102\142\116\373\122\167\001\001\000\040\004\172\007" + "\275\022\271\024\206\031\215\047\264\053\205\054\045" + "\062\116\066\272\071\277\074\163\102\142\116\371\122" + "\167\001\001\000\040\004\172\007\275\022\271\024\206" + "\031\215\047\264\053\205\054\045\062\116\066\272\071" + "\277\074\163\102\142\116\367\122\167\001\001\000\040" + "\004\172\007\275\022\271\024\206\031\215\047\264\053" + "\205\054\045\062\116\066\272\071\277\074\163\102\142" + "\116\274\122\167\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\006\031\250\034\u0114\001\001\000\014" + "\014\073\015\u0115\053\071\054\045\055\074\001\001\000" + "\002\001\001\000\002\001\001\000\004\054\060\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\006\031\250\034\u011d" + "\001\001\000\002\001\001\000\006\031\250\034\u011f\001" + "\001\000\002\001\001\000\032\004\172\005\u0121\007\275" + "\022\271\024\206\031\215\053\205\054\045\071\277\074" + "\337\102\142\122\167\001\001\000\002\001\001\000\004" + "\054\u0123\001\001\000\002\001\001\000\040\004\172\005" + "\u0129\007\275\022\271\024\206\031\215\047\264\053\205" + "\054\045\062\332\066\272\071\277\074\163\102\142\122" + "\167\001\001\000\040\004\172\005\u0128\007\275\022\271" + "\024\206\031\215\047\264\053\205\054\045\062\331\066" + "\272\071\277\074\163\102\142\122\167\001\001\000\040" + "\004\172\005\u0127\007\275\022\271\024\206\031\215\047" + "\264\053\205\054\045\062\330\066\272\071\277\074\163" + "\102\142\122\167\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\006\031\250\034\u0130\001\001\000\002\001\001\000\062" + "\003\u0137\004\172\005\u013f\007\275\011\u0136\022\271\024" + "\206\031\215\041\u0138\043\212\045\222\047\264\053\205" + "\054\045\060\126\062\116\066\272\071\277\074\163\102" + "\142\114\u0135\116\u0103\120\u0139\122\167\001\001\000\044" + "\004\172\007\275\022\271\024\206\031\215\047\264\053" + "\205\054\045\062\116\066\272\071\277\074\163\102\142" + "\114\u016a\116\u0103\120\u0139\122\167\001\001\000\044\004" + "\172\007\275\022\271\024\206\031\215\047\264\053\205" + "\054\045\062\116\066\272\071\277\074\163\102\142\114" + "\u0169\116\u0103\120\u0139\122\167\001\001\000\050\004\172" + "\007\275\011\u0136\022\271\024\206\031\215\047\264\053" + "\205\054\045\060\u0168\062\116\066\272\071\277\074\163" + "\102\142\114\u0135\116\u0103\120\u0139\122\167\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\044\004\172\007\275\022" + "\271\024\206\031\215\047\264\053\205\054\045\062\116" + "\066\272\071\277\074\163\102\142\114\u0147\116\u0103\120" + "\u0139\122\167\001\001\000\044\004\172\007\275\022\271" + "\024\206\031\215\047\264\053\205\054\045\062\116\066" + "\272\071\277\074\163\102\142\114\u0146\116\u0103\120\u0139" + "\122\167\001\001\000\044\004\172\007\275\022\271\024" + "\206\031\215\047\264\053\205\054\045\062\116\066\272" + "\071\277\074\163\102\142\114\u0145\116\u0103\120\u0139\122" + "\167\001\001\000\044\004\172\007\275\022\271\024\206" + "\031\215\047\264\053\205\054\045\062\116\066\272\071" + "\277\074\163\102\142\114\u0144\116\u0103\120\u0139\122\167" + "\001\001\000\044\004\172\007\275\022\271\024\206\031" + "\215\047\264\053\205\054\045\062\116\066\272\071\277" + "\074\163\102\142\114\u0140\116\u0103\120\u0139\122\167\001" + "\001\000\002\001\001\000\002\001\001\000\042\004\172" + "\007\275\022\271\024\206\031\215\047\264\053\205\054" + "\045\062\116\066\272\071\277\074\163\102\142\116\u0103" + "\120\u010b\122\167\001\001\000\042\004\172\007\275\022" + "\271\024\206\031\215\047\264\053\205\054\045\062\116" + "\066\272\071\277\074\163\102\142\116\u0103\120\u0102\122" + "\167\001\001\000\042\004\172\007\275\022\271\024\206" + "\031\215\047\264\053\205\054\045\062\116\066\272\071" + "\277\074\163\102\142\116\u0103\120\u0109\122\167\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\060\003\u0137\004\172\007\275\011\u0136" + "\022\271\024\206\031\215\041\u014b\043\u014c\045\222\047" + "\264\053\205\054\045\060\126\062\116\066\272\071\277" + "\074\163\102\142\114\u0135\116\u0103\120\u0139\122\167\001" + "\001\000\050\004\172\007\275\011\u0136\022\271\024\206" + "\031\215\047\264\053\205\054\045\060\u014a\062\116\066" + "\272\071\277\074\163\102\142\114\u0135\116\u0103\120\u0139" + "\122\167\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\056\003\u0137\004\172\007\275\011\u0136" + "\022\271\024\206\031\215\043\u014f\045\u014e\047\264\053" + "\205\054\045\060\126\062\116\066\272\071\277\074\163" + "\102\142\114\u0135\116\u0103\120\u0139\122\167\001\001\000" + "\002\001\001\000\002\001\001\000\044\004\172\007\275" + "\022\271\024\206\031\215\047\264\053\205\054\045\062" + "\116\066\272\071\277\074\163\102\142\114\u0167\116\u0103" + "\120\u0139\122\167\001\001\000\044\004\172\007\275\022" + "\271\024\206\031\215\047\264\053\205\054\045\062\116" + "\066\272\071\277\074\163\102\142\114\u0166\116\u0103\120" + "\u0139\122\167\001\001\000\044\004\172\007\275\022\271" + "\024\206\031\215\047\264\053\205\054\045\062\116\066" + "\272\071\277\074\163\102\142\114\u0165\116\u0103\120\u0139" + "\122\167\001\001\000\044\004\172\007\275\022\271\024" + "\206\031\215\047\264\053\205\054\045\062\116\066\272" + "\071\277\074\163\102\142\114\u0164\116\u0103\120\u0139\122" + "\167\001\001\000\044\004\172\007\275\022\271\024\206" + "\031\215\047\264\053\205\054\045\062\116\066\272\071" + "\277\074\163\102\142\114\u0163\116\u0103\120\u0139\122\167" + "\001\001\000\044\004\172\007\275\022\271\024\206\031" + "\215\047\264\053\205\054\045\062\116\066\272\071\277" + "\074\163\102\142\114\u0162\116\u0103\120\u0139\122\167\001" + "\001\000\044\004\172\007\275\022\271\024\206\031\215" + "\047\264\053\205\054\045\062\116\066\272\071\277\074" + "\163\102\142\114\u0161\116\u0103\120\u0139\122\167\001\001" + "\000\044\004\172\007\275\022\271\024\206\031\215\047" + "\264\053\205\054\045\062\116\066\272\071\277\074\163" + "\102\142\114\u0160\116\u0103\120\u0139\122\167\001\001\000" + "\044\004\172\007\275\022\271\024\206\031\215\047\264" + "\053\205\054\045\062\116\066\272\071\277\074\163\102" + "\142\114\u015f\116\u0103\120\u0139\122\167\001\001\000\044" + "\004\172\007\275\022\271\024\206\031\215\047\264\053" + "\205\054\045\062\116\066\272\071\277\074\163\102\142" + "\114\u015e\116\u0103\120\u0139\122\167\001\001\000\044\004" + "\172\007\275\022\271\024\206\031\215\047\264\053\205" + "\054\045\062\116\066\272\071\277\074\163\102\142\114" + "\u015d\116\u0103\120\u0139\122\167\001\001\000\044\004\172" + "\007\275\022\271\024\206\031\215\047\264\053\205\054" + "\045\062\116\066\272\071\277\074\163\102\142\114\u015c" + "\116\u0103\120\u0139\122\167\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\006\031\250\034\u0170\001" + "\001\000\002\001\001\000\144\002\113\003\112\004\172" + "\005\111\006\137\007\136\010\147\011\146\021\115\022" + "\114\023\207\024\206\025\162\026\161\030\232\031\215" + "\035\u0172\036\234\040\107\041\106\042\213\043\212\044" + "\223\045\222\046\201\047\177\053\205\054\045\057\127" + "\060\126\061\117\062\116\063\152\064\151\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\145" + "\114\144\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\002\001\001\000\002\001\001\000\064" + "\003\u0137\004\172\005\u0176\007\275\011\u0136\022\271\024" + "\206\026\u0175\031\215\041\106\043\212\045\222\047\264" + "\053\205\054\045\060\126\062\116\066\272\071\277\074" + "\163\102\142\114\u0135\116\u0103\120\u0139\122\167\001\001" + "\000\002\001\001\000\002\001\001\000\060\003\u0137\004" + "\172\007\275\011\u0136\022\271\024\206\031\215\041\u0138" + "\043\212\045\222\047\264\053\205\054\045\060\126\062" + "\116\066\272\071\277\074\163\102\142\114\u0135\116\u0103" + "\120\u0139\122\167\001\001\000\074\004\172\006\137\007" + "\136\021\115\022\114\023\207\024\206\031\215\046\201" + "\047\177\053\205\054\045\061\117\062\116\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\u019b" + "\114\u019a\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\074\004\172\006\137\007\136\021\115" + "\022\114\023\207\024\206\031\215\046\201\047\177\053" + "\205\054\045\061\117\062\116\065\123\066\121\070\135" + "\071\134\073\164\074\163\102\142\113\u0199\114\u0198\115" + "\176\116\174\117\220\120\217\121\170\122\167\001\001" + "\000\074\004\172\006\137\007\136\021\115\022\114\023" + "\207\024\206\031\215\046\201\047\177\053\205\054\045" + "\061\117\062\116\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\u0197\114\u0196\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\074\004" + "\172\006\137\007\136\021\115\022\114\023\207\024\206" + "\031\215\046\201\047\177\053\205\054\045\061\117\062" + "\116\065\123\066\121\070\135\071\134\073\164\074\163" + "\102\142\113\u0195\114\u0194\115\176\116\174\117\220\120" + "\217\121\170\122\167\001\001\000\074\004\172\006\137" + "\007\136\021\115\022\114\023\207\024\206\031\215\046" + "\201\047\177\053\205\054\045\061\117\062\116\065\123" + "\066\121\070\135\071\134\073\164\074\163\102\142\113" + "\u0193\114\u0192\115\176\116\174\117\220\120\217\121\170" + "\122\167\001\001\000\074\004\172\006\137\007\136\021" + "\115\022\114\023\207\024\206\031\215\046\201\047\177" + "\053\205\054\045\061\117\062\116\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\u0191\114\u0190" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\074\004\172\006\137\007\136\021\115\022\114" + "\023\207\024\206\031\215\046\201\047\177\053\205\054" + "\045\061\117\062\116\065\123\066\121\070\135\071\134" + "\073\164\074\163\102\142\113\u018f\114\u018e\115\176\116" + "\174\117\220\120\217\121\170\122\167\001\001\000\074" + "\004\172\006\137\007\136\021\115\022\114\023\207\024" + "\206\031\215\046\201\047\177\053\205\054\045\061\117" + "\062\116\065\123\066\121\070\135\071\134\073\164\074" + "\163\102\142\113\u018d\114\u018c\115\176\116\174\117\220" + "\120\217\121\170\122\167\001\001\000\074\004\172\006" + "\137\007\136\021\115\022\114\023\207\024\206\031\215" + "\046\201\047\177\053\205\054\045\061\117\062\116\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\113\u018b\114\u018a\115\176\116\174\117\220\120\217\121" + "\170\122\167\001\001\000\074\004\172\006\137\007\136" + "\021\115\022\114\023\207\024\206\031\215\046\201\047" + "\177\053\205\054\045\061\117\062\116\065\123\066\121" + "\070\135\071\134\073\164\074\163\102\142\113\u0189\114" + "\u0188\115\176\116\174\117\220\120\217\121\170\122\167" + "\001\001\000\074\004\172\006\137\007\136\021\115\022" + "\114\023\207\024\206\031\215\046\201\047\177\053\205" + "\054\045\061\117\062\116\065\123\066\121\070\135\071" + "\134\073\164\074\163\102\142\113\u0187\114\u0186\115\176" + "\116\174\117\220\120\217\121\170\122\167\001\001\000" + "\074\004\172\006\137\007\136\021\115\022\114\023\207" + "\024\206\031\215\046\201\047\177\053\205\054\045\061" + "\117\062\116\065\123\066\121\070\135\071\134\073\164" + "\074\163\102\142\113\u0185\114\uu01a1\031\215\053" + "\205\054\045\102\142\122\313\001\001\000\002\001\001" + "\000\024\004\172\005\u01a3\007\304\024\206\031\215\053" + "\205\054\045\102\142\122\167\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\010\053\071\054" + "\045\055\u01c9\001\001\000\010\053\071\054\045\055\u01c4" + "\001\001\000\002\001\001\000\006\031\250\034\u01bb\001" + "\001\000\010\053\071\054\045\055\u01b5\001\001\000\002" + "\001\001\000\002\001\001\000\010\053\071\054\045\055" + "\u01af\001\001\000\010\053\071\054\045\055\u01b0\001\001" + "\000\002\001\001\000\002\001\001\000\140\002\113\003" + "\112\004\172\005\111\006\137\007\136\010\147\011\146" + "\021\115\022\114\023\207\024\206\025\162\026\161\030" + "\u01b2\031\215\040\107\041\106\042\213\043\212\044\223" + "\045\222\046\201\047\177\053\205\054\045\057\127\060" + "\126\061\117\062\116\063\152\064\151\065\123\066\121" + "\070\135\071\134\073\164\074\163\102\142\113\145\114" + "\144\115\176\116\174\117\220\120\217\121\170\122\167" + "\001\001\000\002\001\001\000\140\002\113\003\112\004" + "\172\005\111\006\137\007\136\010\147\011\146\021\115" + "\022\114\023\207\024\206\025\162\026\161\030\u01b4\031" + "\215\040\107\041\106\042\213\043\212\044\223\045\222" + "\046\201\047\177\053\205\054\045\057\127\060\126\061" + "\117\062\116\063\152\064\151\065\123\066\121\070\135" + "\071\134\073\164\074\163\102\142\113\145\114\144\115" + "\176\116\174\117\220\120\217\121\170\122\167\001\001" + "\000\002\001\001\000\002\001\001\000\140\002\113\003" + "\112\004\172\005\111\006\137\007\136\010\147\011\146" + "\021\115\022\114\023\207\024\206\025\162\026\161\030" + "\u01b7\031\215\040\107\041\106\042\213\043\212\044\223" + "\045\222\046\201\047\177\053\205\054\045\057\127\060" + "\126\061\117\062\116\063\152\064\151\065\123\066\121" + "\070\135\071\134\073\164\074\163\102\142\113\145\114" + "\144\115\176\116\174\117\220\120\217\121\170\122\167" + "\001\001\000\002\001\001\000\140\002\113\003\112\004" + "\172\005\111\006\137\007\136\010\147\011\146\021\115" + "\022\114\023\207\024\206\025\162\026\161\030\u01b9\031" + "\215\040\107\041\106\042\213\043\212\044\223\045\222" + "\046\201\047\177\053\205\054\045\057\127\060\126\061" + "\117\062\116\063\152\064\151\065\123\066\121\070\135" + "\071\134\073\164\074\163\102\142\113\145\114\144\115" + "\176\116\174\117\220\120\217\121\170\122\167\001\001" + "\000\002\001\001\000\012\014\u01bf\053\071\054\045\055" + "\u01a8\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\010\053\071\054\045\055\u01b5\001\001\000" + "\002\001\001\000\140\002\113\003\112\004\172\005\111" + "\006\137\007\136\010\147\011\146\021\115\022\114\023" + "\207\024\206\025\162\026\161\030\u01c1\031\215\040\107" + "\041\106\042\213\043\212\044\223\045\222\046\201\047" + "\177\053\205\054\045\057\127\060\126\061\117\062\116" + "\063\152\064\151\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\145\114\144\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\002\001" + "\001\000\140\002\113\003\112\004\172\005\111\006\137" + "\007\136\010\147\011\146\021\115\022\114\023\207\024" + "\206\025\162\026\161\030\u01c3\031\215\040\107\041\106" + "\042\213\043\212\044\223\045\222\046\201\047\177\053" + "\205\054\045\057\127\060\126\061\117\062\116\063\152" + "\064\151\065\123\066\121\070\135\071\134\073\164\074" + "\163\102\142\113\145\114\144\115\176\116\174\117\220" + "\120\217\121\170\122\167\001\001\000\002\001\001\000" + "\002\001\001\000\140\002\113\003\112\004\172\005\111" + "\006\137\007\136\010\147\011\146\021\115\022\114\023" + "\207\024\206\025\162\026\161\030\u01c6\031\215\040\107" + "\041\106\042\213\043\212\044\223\045\222\046\201\047" + "\177\053\205\054\045\057\127\060\126\061\117\062\116" + "\063\152\064\151\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\145\114\144\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\002\001" + "\001\000\140\002\113\003\112\004\172\005\111\006\137" + "\007\136\010\147\011\146\021\115\022\114\023\207\024" + "\206\025\162\026\161\030\u01c8\031\215\040\107\041\106" + "\042\213\043\212\044\223\045\222\046\201\047\177\053" + "\205\054\045\057\127\060\126\061\117\062\116\063\152" + "\064\151\065\123\066\121\070\135\071\134\073\164\074" + "\163\102\142\113\145\114\144\115\176\116\174\117\220" + "\120\217\121\170\122\167\001\001\000\002\001\001\000" + "\002\001\001\000\140\002\113\003\112\004\172\005\111" + "\006\137\007\136\010\147\011\146\021\115\022\114\023" + "\207\024\206\025\162\026\161\030\u01cb\031\215\040\107" + "\041\106\042\213\043\212\044\223\045\222\046\201\047" + "\177\053\205\054\045\057\127\060\126\061\117\062\116" + "\063\152\064\151\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\145\114\144\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\002\001" + "\001\000\140\002\113\003\112\004\172\005\111\006\137" + "\007\136\010\147\011\146\021\115\022\114\023\207\024" + "\206\025\162\026\161\030\u01cd\031\215\040\107\041\106" + "\042\213\043\212\044\223\045\222\046\201\047\177\053" + "\205\054\045\057\127\060\126\061\117\062\116\063\152" + "\064\151\065\123\066\121\070\135\071\134\073\164\074" + "\163\102\142\113\145\114\144\115\176\116\174\117\220" + "\120\217\121\170\122\167\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\034\004\172\005\u01d3\007\275\022\271\024" + "\206\031\215\047\335\053\205\054\045\071\277\074\163" + "\102\142\122\167\001\001\000\002\001\001\000\006\031" + "\250\034\u01d5\001\001\000\002\001\001\000\026\004\172" + "\005\u01d9\007\275\024\206\031\215\053\205\054\045\071" + "\363\102\142\122\167\001\001\000\032\004\172\005\u01d8" + "\007\275\022\271\024\206\031\215\053\205\054\045\071" + "\277\074\362\102\142\122\167\001\001\000\002\001\001" + "\000\002\001\001\000\126\002\113\003\112\004\172\005" + "\u01de\006\137\007\136\010\147\011\146\021\115\022\114" + "\023\207\024\206\031\215\040\u01dd\041\u014b\042\213\043" + "\u01df\044\223\045\222\046\201\047\177\053\205\054\045" + "\057\127\060\126\061\117\062\116\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\145\114\144" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\052\004\172\005\u01dc\007\275\011\u0136\022\271" + "\024\206\031\215\047\264\053\205\054\045\060\u014a\062" + "\116\066\272\071\277\074\163\102\142\114\u0135\116\u0103" + "\120\u0139\122\167\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\122\002\113" + "\003\112\004\172\005\u01e1\006\137\007\136\010\147\011" + "\146\021\115\022\114\023\207\024\206\031\215\042\u01e2" + "\043\u014f\044\u01e3\045\u014e\046\201\047\177\053\205\054" + "\045\057\127\060\126\061\117\062\116\065\123\066\121" + "\070\135\071\134\073\164\074\163\102\142\113\145\114" + "\144\115\176\116\174\117\220\120\217\121\170\122\167" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\142\002\113\003\112\004\172\005\111\006\137" + "\007\136\010\147\011\146\021\115\022\114\023\207\024" + "\206\025\162\026\161\030\253\031\215\033\u01e5\040\107" + "\041\106\042\213\043\212\044\223\045\222\046\201\047" + "\177\053\205\054\045\057\127\060\126\061\117\062\116" + "\063\152\064\151\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\145\114\144\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\140\002" + "\113\003\112\004\172\005\111\006\137\007\136\010\147" + "\011\146\021\115\022\114\023\207\024\206\025\162\026" + "\161\030\256\031\215\040\107\041\106\042\213\043\212" + "\044\223\045\222\046\201\047\177\053\205\054\045\057" + "\127\060\126\061\117\062\116\063\152\064\151\065\123" + "\066\121\070\135\071\134\073\164\074\163\102\142\113" + "\145\114\144\115\176\116\174\117\220\120\217\121\170" + "\122\167\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\140\002\113\003\112\004\172\005\111" + "\006\137\007\136\010\147\011\146\021\115\022\114\023" + "\207\024\206\025\162\026\161\030\u01ea\031\215\040\107" + "\041\106\042\213\043\212\044\223\045\222\046\201\047" + "\177\053\205\054\045\057\127\060\126\061\117\062\116" + "\063\152\064\151\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\145\114\144\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\140\002\113" + "\003\112\004\172\005\111\006\137\007\136\010\147\011" + "\146\021\115\022\114\023\207\024\206\025\162\026\161" + "\030\u01ee\031\215\040\107\041\106\042\213\043\212\044" + "\223\045\222\046\201\047\177\053\205\054\045\057\127" + "\060\126\061\117\062\116\063\152\064\151\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\145" + "\114\144\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\002\001\001\000\140\002\113\003\112" + "\004\172\005\111\006\137\007\136\010\147\011\146\021" + "\115\022\114\023\207\024\206\025\162\026\161\030\u01f0" + "\031\215\040\107\041\106\042\213\043\212\044\223\045" + "\222\046\201\047\177\053\205\054\045\057\127\060\126" + "\061\117\062\116\063\152\064\151\065\123\066\121\070" + "\135\071\134\073\164\074\163\102\142\113\145\114\144" + "\115\176\116\174\117\220\120\217\121\170\122\167\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\140\002\113\003\112\004\172\005\111\006\137\007" + "\136\010\147\011\146\021\115\022\114\023\207\024\206" + "\025\162\026\161\030\u01f4\031\215\040\107\041\106\042" + "\213\043\212\044\223\045\222\046\201\047\177\053\205" + "\054\045\057\127\060\126\061\117\062\116\063\152\064" + "\151\065\123\066\121\070\135\071\134\073\164\074\163" + "\102\142\113\145\114\144\115\176\116\174\117\220\120" + "\217\121\170\122\167\001\001\000\004\031\u01f5\001\001" + "\000\002\001\001\000\140\002\113\003\112\004\172\005" + "\111\006\137\007\136\010\147\011\146\021\115\022\114" + "\023\207\024\206\025\162\026\161\030\u01f7\031\215\040" + "\107\041\106\042\213\043\212\044\223\045\222\046\201" + "\047\177\053\205\054\045\057\127\060\126\061\117\062" + "\116\063\152\064\151\065\123\066\121\070\135\071\134" + "\073\164\074\163\102\142\113\145\114\144\115\176\116" + "\174\117\220\120\217\121\170\122\167\001\001\000\002" + "\001\001\000\140\002\113\003\112\004\172\005\111\006" + "\137\007\136\010\147\011\146\021\115\022\114\023\207" + "\024\206\025\162\026\161\030\u01f9\031\215\040\107\041" + "\106\042\213\043\212\044\223\045\222\046\201\047\177" + "\053\205\054\045\057\127\060\126\061\117\062\116\063" + "\152\064\151\065\123\066\121\070\135\071\134\073\164" + "\074\163\102\142\113\145\114\144\115\176\116\174\117" + "\220\120\217\121\170\122\167\001\001\000\002\001\001" + "\000\016\014\073\015\072\017\u01fb\053\071\054\045\055" + "\074\001\001\000\002\001\001\000\002\001\001\000\140" + "\002\113\003\112\004\172\005\111\006\137\007\136\010" + "\147\011\146\021\115\022\114\023\207\024\206\025\162" + "\026\161\030\u01fe\031\215\040\107\041\106\042\213\043" + "\212\044\223\045\222\046\201\047\177\053\205\054\045" + "\057\127\060\126\061\117\062\116\063\152\064\151\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\113\145\114\144\115\176\116\174\117\220\120\217\121" + "\170\122\167\001\001\000\002\001\001\000\140\002\113" + "\003\112\004\172\005\111\006\137\007\136\010\147\011" + "\146\021\115\022\114\023\207\024\206\025\162\026\161" + "\030\u0200\031\215\040\107\041\106\042\213\043\212\044" + "\223\045\222\046\201\047\177\053\205\054\045\057\127" + "\060\126\061\117\062\116\063\152\064\151\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\145" + "\114\144\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\002\001\001\000\002\001\001\000\140" + "\002\113\003\112\004\172\005\111\006\137\007\136\010" + "\147\011\146\021\115\022\114\023\207\024\206\025\162" + "\026\161\030\u0203\031\215\040\107\041\106\042\213\043" + "\212\044\223\045\222\046\201\047\177\053\205\054\045" + "\057\127\060\126\061\117\062\116\063\152\064\151\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\113\145\114\144\115\176\116\174\117\220\120\217\121" + "\170\122\167\001\001\000\002\001\001\000\140\002\113" + "\003\112\004\172\005\111\006\137\007\136\010\147\011" + "\146\021\115\022\114\023\207\024\206\025\162\026\161" + "\030\u0205\031\215\040\107\041\106\042\213\043\212\044" + "\223\045\222\046\201\047\177\053\205\054\045\057\127" + "\060\126\061\117\062\116\063\152\064\151\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\145" + "\114\144\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\002\001\001\000\002\001\001\000\140" + "\002\113\003\112\004\172\005\111\006\137\007\136\010" + "\147\011\146\021\115\022\114\023\207\024\206\025\162" + "\026\161\030\u0208\031\215\040\107\041\106\042\213\043" + "\212\044\223\045\222\046\201\047\177\053\205\054\045" + "\057\127\060\126\061\117\062\116\063\152\064\151\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\113\145\114\144\115\176\116\174\117\220\120\217\121" + "\170\122\167\001\001\000\002\001\001\000\140\002\113" + "\003\112\004\172\005\111\006\137\007\136\010\147\011" + "\146\021\115\022\114\023\207\024\206\025\162\026\161" + "\030\u020a\031\215\040\107\041\106\042\213\043\212\044" + "\223\045\222\046\201\047\177\053\205\054\045\057\127" + "\060\126\061\117\062\116\063\152\064\151\065\123\066" + "\121\070\135\071\134\073\164\074\163\102\142\113\145" + "\114\144\115\176\116\174\117\220\120\217\121\170\122" + "\167\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\140\002\113\003\112\004\172\005\111\006" + "\137\007\136\010\147\011\146\021\115\022\114\023\207" + "\024\206\025\162\026\161\030\u020e\031\215\040\107\041" + "\106\042\213\043\212\044\223\045\222\046\201\047\177" + "\053\205\054\045\057\127\060\126\061\117\062\116\063" + "\152\064\151\065\123\066\121\070\135\071\134\073\164" + "\074\163\102\142\113\145\114\144\115\176\116\174\117" + "\220\120\217\121\170\122\167\001\001\000\004\031\u020f" + "\001\001\000\002\001\001\000\004\031\u0211\001\001\000" + "\002\001\001\000\140\002\113\003\112\004\172\005\111" + "\006\137\007\136\010\147\011\146\021\115\022\114\023" + "\207\024\206\025\162\026\161\030\u021f\031\215\040\107" + "\041\106\042\213\043\212\044\223\045\222\046\201\047" + "\177\053\205\054\045\057\127\060\126\061\117\062\116" + "\063\152\064\151\065\123\066\121\070\135\071\134\073" + "\164\074\163\102\142\113\145\114\144\115\176\116\174" + "\117\220\120\217\121\170\122\167\001\001\000\016\014" + "\073\015\072\017\u021a\053\071\054\045\055\074\001\001" + "\000\016\014\073\015\072\017\u0215\053\071\054\045\055" + "\074\001\001\000\002\001\001\000\002\001\001\000\140" + "\002\113\003\112\004\172\005\111\006\137\007\136\010" + "\147\011\146\021\115\022\114\023\207\024\206\025\162" + "\026\161\030\u0218\031\215\040\107\041\106\042\213\043" + "\212\044\223\045\222\046\201\047\177\053\205\054\045" + "\057\127\060\126\061\117\062\116\063\152\064\151\065" + "\123\066\121\070\135\071\134\073\164\074\163\102\142" + "\113\145\114\144\115\176\116\174\117\220\120\217\121" + "\170\122\167\001\001\000\004\031\u0219\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\140\002" + "\113\003\112\004\172\005\111\006\137\007\136\010\147" + "\011\146\021\115\022\114\023\207\024\206\025\162\026" + "\161\030\u021d\031\215\040\107\041\106\042\213\043\212" + "\044\223\045\222\046\201\047\177\053\205\054\045\057" + "\127\060\126\061\117\062\116\063\152\064\151\065\123" + "\066\121\070\135\071\134\073\164\074\163\102\142\113" + "\145\114\144\115\176\116\174\117\220\120\217\121\170" + "\122\167\001\001\000\004\031\u021e\001\001\000\002\001" + "\001\000\004\031\u0220\001\001\000\002\001\001\000\002" + "\001\001\000\006\053\u022c\054\045\001\001\000\014\053" + "\205\054\045\102\u0226\103\u0225\104\u0224\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\010\053" + "\205\054\045\102\u0228\001\001\000\002\001\001\000\002" + "\001\001\000\006\053\u022b\054\045\001\001\000\002\001" + "\001\000\002\001\001\000\004\031\u023a\001\001\000\002" + "\001\001\000\006\053\u0230\054\045\001\001\000\004\031" + "\u0231\001\001\000\002\001\001\000\016\014\073\015\072" + "\017\u0237\053\071\054\045\055\074\001\001\000\016\014" + "\073\015\072\017\u0234\053\071\054\045\055\074\001\001" + "\000\002\001\001\000\004\031\u0236\001\001\000\002\001" + "\001\000\002\001\001\000\004\031\u0239\001\001\000\002" + "\001\001\000\002\001\001\000\016\014\073\015\072\017" + "\u0240\053\071\054\045\055\074\001\001\000\016\014\073" + "\015\072\017\u023d\053\071\054\045\055\074\001\001\000" + "\002\001\001\000\004\031\u023f\001\001\000\002\001\001" + "\000\002\001\001\000\004\031\u0242\001\001\000\002\001" + "\001\000\004\031\u0248\001\001\000\002\001\001\000\006" + "\053\u0246\054\045\001\001\000\004\031\u0247\001\001\000" + "\002\001\001\000\002\001\001\000\006\031\u024c\052\u024b" + "\001\001\000\140\002\113\003\112\004\172\005\111\006" + "\137\007\136\010\147\011\146\021\115\022\114\023\207" + "\024\206\025\162\026\161\030\u0259\031\215\040\107\041" + "\106\042\213\043\212\044\223\045\222\046\201\047\177" + "\053\205\054\045\057\127\060\126\061\117\062\116\063" + "\152\064\151\065\123\066\121\070\135\071\134\073\164" + "\074\163\102\142\113\145\114\144\115\176\116\174\117" + "\220\120\217\121\170\122\167\001\001\000\002\001\001" + "\000\002\001\001\000\010\053\071\054\045\055\u0255\001" + "\001\000\010\053\071\054\045\055\u024f\001\001\000\002" + "\001\001\000\006\031\u024c\052\u0251\001\001\000\002\001" + "\001\000\006\031\u024c\052\u0253\001\001\000\002\001\001" + "\000\006\031\u024c\052\u0258\001\001\000\002\001\001\000" + "\006\031\u024c\052\u0257\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\010\053" + "\071\054\045\055\u025c\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\004\013\u0260\001\001\000" + "\010\031\u0262\053\u0261\054\045\001\001\000\012\031\u0289" + "\053\u0288\054\045\075\u028a\001\001\000\004\075\u0263\001" + "\001\000\004\027\u0285\001\001\000\010\110\u0266\111\u0269" + "\112\u0267\001\001\000\002\001\001\000\006\053\u0277\054" + "\045\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\010\110\u0266\111\u0269\112" + "\u0271\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\006\110\u0266\111\u0274\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\002\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\004\075\u028e\001\001\000\004\075\u028c\001" + "\001\000\004\027\u028b\001\001\000\002\001\001\000\004" + "\027\u028d\001\001\000\002\001\001\000\004\027\u028f\001" + "\001\000\002\001\001\000\004\077\u0294\001\001\000\012" + "\053\205\054\045\102\u029b\105\u029f\001\001\000\010\053" + "\205\054\045\102\u029e\001\001\000\012\053\205\054\045" + "\102\u029b\105\u029a\001\001\000\002\001\001\000\016\014" + "\073\015\072\017\u0296\053\071\054\045\055\074\001\001" + "\000\002\001\001\000\006\031\u0299\032\u0298\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\010\053\205\054\045\102\u029d\001\001\000" + "\002\001\001\000\002\001\001\000\002\001\001\000\002" + "\001\001\000\010\053\u02a2\054\045\056\u02a4\001\001\000" + "\002\001\001\000\006\053\u02aa\054\045\001\001\000\002" + "\001\001\000\006\053\u02a7\054\045\001\001\000\002\001" + "\001\000\002\001\001\000\006\053\u02a9\054\045\001\001" + "\000\002\001\001\000\002\001\001\000\002\001\001\000" + "\002\001\001\000\004\031\u02b1\001\001\000\004\031\u02b0" + "\001\001\000\002\001\001\000\002\001\001\000\002\001" + "\001\000\012\031\u02b7\053\u02b6\054\045\075\u02b8\001\001" + "\000\004\075\u02b4\001\001\000\004\027\u02b5\001\001\000" + "\002\001\001\000\004\075\u02bc\001\001\000\004\075\u02ba" + "\001\001\000\004\027\u02b9\001\001\000\002\001\001\000" + "\004\027\u02bb\001\001\000\002\001\001\000\004\027\u02bd" + "\001\001\000\002\001\001\000\004\031\u02c2\001\001\000" + "\004\031\u02c1\001\001\000\002\001\001\000\002\001\001" + "\000\002\001\001\000\010\031\u02d4\053\u02d3\054\045\001" + "\001\000\002\001\001\000\004\013\u02c6\001\001\000\010" + "\031\u02c8\053\u02c7\054\045\001\001\000\012\031\u02cc\053" + "\u02cb\054\045\075\u02cd\001\001\000\004\075\u02c9\001\001" + "\000\004\027\u02ca\001\001\000\002\001\001\000\004\075" + "\u02d1\001\001\000\004\075\u02cf\001\001\000\004\027\u02ce" + "\001\001\000\002\001\001\000\004\027\u02d0\001\001\000" + "\002\001\001\000\004\027\u02d2\001\001\000\002\001\001" + "\000\012\031\u02d8\053\u02d7\054\045\075\u02d9\001\001\000" + "\004\075\u02d5\001\001\000\004\027\u02d6\001\001\000\002" + "\001\001\000\004\075\u02dd\001\001\000\004\075\u02db\001" + "\001\000\004\027\u02da\001\001\000\002\001\001\000\004" + "\027\u02dc\001\001\000\002\001\001\000\004\027\u02de\001" + "\001\000\002\001\001\000\002\001\001"
    });

    /** Access to <code>reduce_goto</code> table. */
    @Override
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /** Instance of action encapsulation class. */
    protected CUP$CompParser$actions action_obj;

    /** Action encapsulation object initializer. */
    @Override
    protected void init_actions() {
        action_obj = new CUP$CompParser$actions(this);
    }

    /** Invoke a user supplied parse action. */
    @Override
    public java_cup.runtime.Symbol do_action(int act_num, java_cup.runtime.lr_parser parser, java.util.Stack stack, int top) throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
    }

    /** Indicates start state. */
    @Override
    public int start_state() {
        return 0;
    }

    /** Indicates start production. */
    @Override
    public int start_production() {
        return 1;
    }

    /** <code>EOF</code> Symbol index. */
    @Override
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index. */
    @Override
    public int error_sym() {
        return 1;
    }



    public CompModule alloymodule = null;

    @Override
    public Symbol parse() throws java.lang.Exception {
        int act; // current action code
        Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
        short handle_size, lhs_sym_num; // information about production being reduced with
        boolean logging = AlloyCore.isDebug();
        production_tab = production_table();
        action_tab = action_table();
        reduce_tab = reduce_table();
        init_actions();
        user_init();
        // start
        cur_token = scan();
        stack.removeAllElements();
        stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
        tos = 0;
        for (_done_parsing = false; !_done_parsing;) {
            act = get_action(((Symbol) stack.peek()).parse_state, cur_token.sym);
            if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
                if (logging)
                    System.out.println("shift " + cur_token.sym);
                cur_token.parse_state = act - 1;
                stack.push(cur_token);
                tos++;
                cur_token = scan();
            } else if (act < 0) { // "reduce"
                if (logging)
                    System.out.println("reduce " + ((-act) - 1));
                lhs_sym = do_action((-act) - 1, this, stack, tos);
                lhs_sym_num = production_tab[(-act) - 1][0];
                handle_size = production_tab[(-act) - 1][1];
                for (int i = 0; i < handle_size; i++) {
                    stack.pop();
                    tos--;
                }
                act = get_reduce(((Symbol) stack.peek()).parse_state, lhs_sym_num);
                lhs_sym.parse_state = act;
                stack.push(lhs_sym);
                tos++;
            } else { // "error"
                if (logging)
                    System.out.println("error");
                syntax_error(cur_token);
                done_parsing();
            }
        }
        return lhs_sym;
    }

    @Override
    public void syntax_error(Symbol x) throws Err {
        Map<Integer,String> ch = new LinkedHashMap<Integer,String>();
        ch.put(CompSym.ARROW, "->");
        ch.put(CompSym.ANY_ARROW_SOME, "->");
        ch.put(CompSym.ANY_ARROW_ONE, "->");
        ch.put(CompSym.ANY_ARROW_LONE, "->");
        ch.put(CompSym.SOME_ARROW_ANY, "some");
        ch.put(CompSym.SOME_ARROW_SOME, "some");
        ch.put(CompSym.SOME_ARROW_ONE, "some");
        ch.put(CompSym.SOME_ARROW_LONE, "some");
        ch.put(CompSym.ONE_ARROW_ANY, "one");
        ch.put(CompSym.ONE_ARROW_SOME, "one");
        ch.put(CompSym.ONE_ARROW_ONE, "one");
        ch.put(CompSym.ONE_ARROW_LONE, "one");
        ch.put(CompSym.LONE_ARROW_ANY, "lone");
        ch.put(CompSym.LONE_ARROW_SOME, "lone");
        ch.put(CompSym.LONE_ARROW_ONE, "lone");
        ch.put(CompSym.LONE_ARROW_LONE, "lone");
        ch.put(CompSym.INTADD, "fun");
        ch.put(CompSym.INTSUB, "fun");
        ch.put(CompSym.INTMUL, "fun");
        ch.put(CompSym.INTDIV, "fun");
        ch.put(CompSym.INTREM, "fun");
        ch.put(CompSym.INTMIN, "fun");
        ch.put(CompSym.INTMAX, "fun");
        ch.put(CompSym.INTNEXT, "fun");
        ch.put(CompSym.TOTALORDER, "pred");
        ch.put(CompSym.ABSTRACT, "abstract");
        ch.put(CompSym.ALL, "all");
        ch.put(CompSym.ALL2, "all");
        ch.put(CompSym.AMPERSAND, "&");
        ch.put(CompSym.AND, "&&");
        ch.put(CompSym.AS, "as");
        ch.put(CompSym.ASSERT, "assert");
        ch.put(CompSym.AT, "@");
        ch.put(CompSym.BAR, "|");
        ch.put(CompSym.BUT, "but");
        ch.put(CompSym.CARET, "^");
        ch.put(CompSym.CHECK, "check");
        ch.put(CompSym.COLON, ":");
        ch.put(CompSym.COMMA, ", ");
        ch.put(CompSym.DISJ, "disj");
        ch.put(CompSym.DOMAIN, "<:");
        ch.put(CompSym.DOT, ".");
        ch.put(CompSym.ELSE, "else");
        ch.put(CompSym.ENUM, "enum");
        ch.put(CompSym.EQUALS, "=");
        ch.put(CompSym.EXACTLY, "exactly");
        ch.put(CompSym.EXH, "exh");
        ch.put(CompSym.EXPECT, "expect");
        ch.put(CompSym.EXTENDS, "extends");
        ch.put(CompSym.FACT, "fact");
        ch.put(CompSym.FOR, "for");
        ch.put(CompSym.FUN, "fun");
        ch.put(CompSym.GT, ">");
        ch.put(CompSym.GTE, ">=");
        ch.put(CompSym.HASH, "#");
        ch.put(CompSym.IDEN, "iden");
        ch.put(CompSym.IFF, "iff");
        ch.put(CompSym.IMPLIES, "=>");
        ch.put(CompSym.IN, "in");
        ch.put(CompSym.INT, "int");
        ch.put(CompSym.LBRACE, "{");
        ch.put(CompSym.LBRACKET, "[");
        ch.put(CompSym.LET, "let");
        ch.put(CompSym.LONE2, "lone");
        ch.put(CompSym.LONE, "lone");
        ch.put(CompSym.LPAREN, "(");
        ch.put(CompSym.LT, "<");
        ch.put(CompSym.LTE, "<=");
        ch.put(CompSym.MINUS, "-");
        ch.put(CompSym.MODULE, "module");
        ch.put(CompSym.NO2, "no");
        ch.put(CompSym.NO, "no");
        ch.put(CompSym.NONE, "none");
        ch.put(CompSym.NOT, "!");
        ch.put(CompSym.NOTEQUALS, "!");
        ch.put(CompSym.NOTGT, "!");
        ch.put(CompSym.NOTGTE, "!");
        ch.put(CompSym.NOTIN, "!");
        ch.put(CompSym.NOTLT, "!");
        ch.put(CompSym.NOTLTE, "!");
        ch.put(CompSym.ONE2, "one");
        ch.put(CompSym.ONE, "one");
        ch.put(CompSym.OPEN, "open");
        ch.put(CompSym.OR, "||");
        ch.put(CompSym.PART, "part");
        ch.put(CompSym.PLUS, "+");
        ch.put(CompSym.PLUSPLUS, "++");
        ch.put(CompSym.PRED, "pred");
        ch.put(CompSym.PRIVATE, "private");
        ch.put(CompSym.RANGE, ":>");
        ch.put(CompSym.RBRACE, "}");
        ch.put(CompSym.RBRACKET, "]");
        ch.put(CompSym.RPAREN, ")");
        ch.put(CompSym.RUN, "run");
        ch.put(CompSym.SEQ, "seq");
        ch.put(CompSym.SET, "set");
        ch.put(CompSym.SHL, "<<");
        ch.put(CompSym.SHR, ">>>");
        ch.put(CompSym.SHA, ">>");
        ch.put(CompSym.SIG, "sig");
        ch.put(CompSym.SIGINT, "Int");
        ch.put(CompSym.SLASH, "/");
        ch.put(CompSym.SOME2, "some");
        ch.put(CompSym.SOME, "some");
        ch.put(CompSym.STAR, "*");
        ch.put(CompSym.STRING, "String");
        ch.put(CompSym.SUM2, "sum");
        ch.put(CompSym.SUM, "sum");
        ch.put(CompSym.THIS, "this");
        ch.put(CompSym.TILDE, "~");
        ch.put(CompSym.UNIV, "univ");
        ch.put(CompSym.ID, "NAME");
        ch.put(CompSym.NUMBER, "NUMBER");
        ch.put(CompSym.STR, "STRING");
        ch.put(CompSym.VAL, "val");
        ch.put(CompSym.TEST, "@Test");
        ch.put(CompSym.CMD, "@cmd:");

        TreeSet<String> list = new TreeSet<String>();
        Pos p = Pos.UNKNOWN;
        if (x != null && x.value instanceof Pos)
            p = (Pos) (x.value);
        else if (x != null && x.value instanceof Expr)
            p = ((Expr) (x.value)).pos;
        else if (x != null)
            p = x.pos;
        if (!stack.empty())
            for (Map.Entry<Integer,String> e : ch.entrySet()) {
                int key = e.getKey(), act = get_action(((Symbol) stack.peek()).parse_state, key);
                if (act == 0)
                    continue;
                try {
                    if (act > 0 || alloy_confirm(key))
                        list.add(e.getValue());
                } catch (Throwable ex) {
                    // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
                }
            }
        String result = "There are " + list.size() + " possible tokens that can appear here:\n";
        for (String item : list)
            result = result + item + " ";
        throw new ErrorSyntax(p, (list.size() != 0) ? result : "");
    }

    private boolean alloy_confirm(int key) {
        int state = ((Symbol) stack.peek()).parse_state;
        Stack<Object> newstack = new Stack<Object>();
        for (Object x : stack)
            newstack.push(x);
        while (true) {
            int act = get_action(state, key);
            if (act > 0)
                return true;
            if (act == 0)
                return false;
            int lhs_sym_num = production_tab[(-act) - 1][0];
            int handle_size = production_tab[(-act) - 1][1];
            for (int i = 0; i < handle_size; i++) {
                if (newstack.empty())
                    return false;
                newstack.pop();
            }
            if (newstack.empty())
                return false;
            if (newstack.peek() instanceof Symbol)
                state = ((Symbol) newstack.peek()).parse_state;
            state = get_reduce(state, lhs_sym_num);
            newstack.push(null);
        }
    }

    static final String INT_LIB_NAME = "util" + java.io.File.separator + "integer";

    static CompModule alloy_parseStream(List<Object> seenDollar, Map<String,String> loaded, Map<String,String> fc, CompModule root, int lineOffset, String filename, String prefix, int initialResolutionMode) throws Err, FileNotFoundException, IOException {
        Reader isr = null;
        try {
            if (root == null && prefix.length() != 0)
                throw new ErrorFatal("Internal error (parse subfile with root==null)");
            if (root != null && prefix.length() == 0)
                throw new ErrorFatal("Internal error (parse topfile with root!=null)");
            CompModule u = new CompModule(root, filename, prefix);
            if (!filename.endsWith(INT_LIB_NAME + ".als"))
                u.addOpen(null, null, ExprVar.make(null, INT_LIB_NAME), null, ExprVar.make(null, "integer"));
            u.resolution = initialResolutionMode;
            String content = fc != null ? fc.get(filename) : null;
            if (content == null && loaded != null)
                content = loaded.get(filename);
            if (content == null)
                content = Util.readAll(filename);
            if (loaded != null)
                loaded.put(filename, content);
            content = MarkdownHandler.strip(content);
            content = Util.convertLineBreak(content);
            isr = new StringReader(content);
            CompFilter s = new CompFilter(u, seenDollar, filename, lineOffset, new BufferedReader(isr));
            CompParser p = new CompParser(s);
            p.alloymodule = u;
            try {
                p.parse();
            } catch (Throwable ex) {
                if (ex instanceof Err)
                    throw (Err) ex;
                throw new ErrorFatal("Parser Exception", ex);
            }
            return u;
        } finally {
            Util.close(isr);
        }
    }


}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$CompParser$actions {


    /**
     * This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR" can be either formulas (saying the
     * EXPR has at least 1, exactly 1, or at most 1 tuple), or multiplicity
     * constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default. And whenever we
     * construct a Decl "x: y" object, or an binary expression "x in y", or a
     * function return type, we call this method on y to convert it into a
     * multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal. So the
     * first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places where a
     * mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or
     *         ONE), otherwise it just returns the original node.
     */
    private Expr mult(Expr x) throws Err {
        if (x instanceof ExprUnary) {
            ExprUnary y = (ExprUnary) x;
            if (y.op == ExprUnary.Op.SOME)
                return ExprUnary.Op.SOMEOF.make(y.pos, y.sub);
            if (y.op == ExprUnary.Op.LONE)
                return ExprUnary.Op.LONEOF.make(y.pos, y.sub);
            if (y.op == ExprUnary.Op.ONE)
                return ExprUnary.Op.ONEOF.make(y.pos, y.sub);
        }
        return x;
    }

    private void nod(ExprVar name) throws Err {
        if (name.label.indexOf('$') >= 0)
            throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }

    private void nod(List<ExprVar> names) throws Err {
        if (names != null)
            for (ExprVar n : names)
                if (n != null && n.label.indexOf('$') >= 0)
                    throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }

    private void c(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c) throws Err {
        if (n != null)
            nod(n);
        int bitwidth = (-1), maxseq = (-1), overall = (-1), expects = (c == null ? -1 : c.num);
        Pos p = o.pos.merge(n != null ? n.span() : e.span());
        for (int i = s.size() - 1; i >= 0; i--) {
            Sig j = s.get(i).sig;
            int k = s.get(i).startingScope;
            p = p.merge(j.pos);
            if (j.label.equals("univ")) {
                overall = k;
                s.remove(i);
                continue;
            }
            if (j.label.equals("int")) {
                if (bitwidth >= 0)
                    throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once.");
                bitwidth = k;
                s.remove(i);
                continue;
            }
            if (j.label.equals("seq")) {
                if (maxseq >= 0)
                    throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once.");
                maxseq = k;
                s.remove(i);
                continue;
            }
        }
        if (n != null)
            parser.alloymodule.addCommand(follow, p, n, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
        else
            parser.alloymodule.addCommand(follow, p, e, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
    }

    private void tc(boolean follow, ExprVar o, ExprVar x, ExprVar n, Expr e, List<CommandScope> s, ExprConstant c) throws Err {
        if (n != null)
            nod(n);
        int bitwidth = (-1), maxseq = (-1), overall = (-1), expects = (c == null ? -1 : c.num);
        Pos p = o.pos.merge(n != null ? n.span() : e.span());
        for (int i = s.size() - 1; i >= 0; i--) {
            Sig j = s.get(i).sig;
            int k = s.get(i).startingScope;
            p = p.merge(j.pos);
            if (j.label.equals("univ")) {
                overall = k;
                s.remove(i);
                continue;
            }
            if (j.label.equals("int")) {
                if (bitwidth >= 0)
                    throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once.");
                bitwidth = k;
                s.remove(i);
                continue;
            }
            if (j.label.equals("seq")) {
                if (maxseq >= 0)
                    throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once.");
                maxseq = k;
                s.remove(i);
                continue;
            }
        }
        if (n != null)
            parser.alloymodule.addTest(follow, p, n, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
        else
            parser.alloymodule.addTest(follow, p, e, o.label.equals("c"), overall, bitwidth, maxseq, expects, s, x);
    }

    private Expr t(Pos pos, Pos oldClosing, Expr left, Expr right, Pos close) throws Err {
        if (right instanceof ExprVar) {
            String n = ((ExprVar) right).label;
            if (n.equals("int"))
                return ExprUnary.Op.CAST2INT.make(pos, left);
            if (n.equals("disj"))
                return ExprList.makeDISJOINT(pos, close, Util.asList(left));
            if (n.equals("pred/totalOrder"))
                return ExprList.makeTOTALORDER(pos, close, Util.asList(left));
        } else if (right instanceof ExprList) {
            return ((ExprList) right).addArg(left);
        }
        return ExprBadJoin.make(pos, oldClosing, left, right);
    }

    private final CompParser parser;

    /** Constructor */
    CUP$CompParser$actions(CompParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code. */
    public final java_cup.runtime.Symbol CUP$CompParser$do_action(int CUP$CompParser$act_num, java_cup.runtime.lr_parser CUP$CompParser$parser, java.util.Stack CUP$CompParser$stack, int CUP$CompParser$top) throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$CompParser$result;

        /* select the action based on the action number */
        switch (CUP$CompParser$act_num) {
            /* . . . . . . . . . . . . . . . . . . . . */
            case 362 : // BaseExpr ::= LBRACE Declz RBRACE 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, ExprConstant.TRUE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 361 : // BaseExpr ::= LBRACE Declz SuperOrBar RBRACE 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.COMPREHENSION.make(o, c, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 360 : // BaseExpr ::= Super 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 359 : // BaseExpr ::= AT Name 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x);
                RESULT = ExprVar.make(o.merge(x.pos), "@" + x.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 358 : // BaseExpr ::= SigRef 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 357 : // BaseExpr ::= LPAREN Expr RPAREN 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 356 : // BaseExpr ::= INTNEXT 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprConstant.Op.NEXT.make(o, 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 355 : // BaseExpr ::= INTMAX 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprConstant.Op.MAX.make(o, 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 354 : // BaseExpr ::= INTMIN 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprConstant.Op.MIN.make(o, 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 353 : // BaseExpr ::= THIS 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(o, "this");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 352 : // BaseExpr ::= IDEN 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(o, "iden");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 351 : // BaseExpr ::= STR 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant x = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 350 : // BaseExpr ::= NUMBER 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant x = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr", 2, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 349 : // UnopExprB ::= CARET UnopExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CLOSURE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB", 80, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 348 : // UnopExprB ::= STAR UnopExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.RCLOSURE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB", 80, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 347 : // UnopExprB ::= TILDE UnopExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.TRANSPOSE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB", 80, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 346 : // UnopExprB ::= BaseExpr 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprB", 80, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 345 : // UnopExprA ::= CARET UnopExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CLOSURE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA", 79, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 344 : // UnopExprA ::= STAR UnopExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.RCLOSURE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA", 79, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 343 : // UnopExprA ::= TILDE UnopExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.TRANSPOSE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA", 79, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 342 : // UnopExprA ::= CARET Bind 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CLOSURE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA", 79, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 341 : // UnopExprA ::= STAR Bind 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.RCLOSURE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA", 79, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 340 : // UnopExprA ::= TILDE Bind 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.TRANSPOSE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExprA", 79, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 339 : // DotExprB ::= BracketExprB DOT SUM 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB", 18, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 338 : // DotExprB ::= BracketExprB DOT INT 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, a));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB", 18, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 337 : // DotExprB ::= BracketExprB DOT TOTALORDER 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = t(o, null, a, ExprVar.make(b, "pred/totalOrder"), null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB", 18, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 336 : // DotExprB ::= BracketExprB DOT DISJ 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = t(o, null, a, ExprVar.make(b, "disj"), null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB", 18, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 335 : // DotExprB ::= BracketExprB DOT UnopExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = t(o, null, a, b, null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB", 18, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 334 : // DotExprB ::= UnopExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprB", 18, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 333 : // DotExprA ::= BracketExprB DOT Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = t(o, null, a, b, null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA", 17, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 332 : // DotExprA ::= UnopExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExprA", 17, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 331 : // BracketExprB ::= SUM LBRACKET Exprs RBRACKET 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Expr> b = (List<Expr>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa = ExprVar.make(a, "int");
                for (Expr bb : b)
                    aa = t(aa.span().merge(bb.span()), c, bb, aa, c);
                RESULT = ExprUnary.Op.CAST2SIGINT.make(a, aa);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB", 5, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 330 : // BracketExprB ::= INT LBRACKET Exprs RBRACKET 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Expr> b = (List<Expr>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa = ExprVar.make(a, "int");
                for (Expr bb : b)
                    aa = t(aa.span().merge(bb.span()), c, bb, aa, c);
                RESULT = ExprUnary.Op.CAST2SIGINT.make(a, aa);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB", 5, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 329 : // BracketExprB ::= TOTALORDER LBRACKET Exprs RBRACKET 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Expr> b = (List<Expr>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa = ExprVar.make(a, "pred/totalOrder");
                for (Expr bb : b)
                    aa = t(aa.span().merge(bb.span()), c, bb, aa, c);
                RESULT = aa;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB", 5, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 328 : // BracketExprB ::= DISJ LBRACKET Exprs RBRACKET 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Expr> b = (List<Expr>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa = ExprVar.make(a, "disj");
                for (Expr bb : b)
                    aa = t(aa.span().merge(bb.span()), c, bb, aa, c);
                RESULT = aa;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB", 5, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 327 : // BracketExprB ::= BracketExprB LBRACKET Exprs RBRACKET 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Expr> b = (List<Expr>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                Expr aa = a;
                for (Expr bb : b)
                    aa = t(aa.span().merge(bb.span()), c, bb, aa, c);
                RESULT = aa;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB", 5, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 326 : // BracketExprB ::= DotExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprB", 5, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 325 : // BracketExprA ::= DotExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExprA", 4, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 324 : // RangeExprB ::= RangeExprB RANGE BracketExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.RANGE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB", 55, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 323 : // RangeExprB ::= BracketExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprB", 55, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 322 : // RangeExprA ::= RangeExprB RANGE Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.RANGE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA", 54, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 321 : // RangeExprA ::= BracketExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExprA", 54, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 320 : // DomainExprB ::= DomainExprB DOMAIN RangeExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.DOMAIN.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB", 16, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 319 : // DomainExprB ::= RangeExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprB", 16, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 318 : // DomainExprA ::= DomainExprB DOMAIN Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.DOMAIN.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA", 15, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 317 : // DomainExprA ::= RangeExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExprA", 15, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 316 : // RelationExprB ::= DomainExprB RelOp RelationExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = o.b.make(o.a, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB", 58, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 315 : // RelationExprB ::= DomainExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprB", 58, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 314 : // RelationExprA ::= DomainExprB RelOp Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pair<Pos,ExprBinary.Op> o = (Pair<Pos,ExprBinary.Op>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = o.b.make(o.a, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA", 57, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 313 : // RelationExprA ::= DomainExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExprA", 57, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 312 : // RelOp ::= LONE_ARROW_LONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 311 : // RelOp ::= LONE_ARROW_ONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 310 : // RelOp ::= LONE_ARROW_SOME 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 309 : // RelOp ::= LONE_ARROW_ANY 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 308 : // RelOp ::= ONE_ARROW_LONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 307 : // RelOp ::= ONE_ARROW_ONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 306 : // RelOp ::= ONE_ARROW_SOME 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 305 : // RelOp ::= ONE_ARROW_ANY 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 304 : // RelOp ::= SOME_ARROW_LONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 303 : // RelOp ::= SOME_ARROW_ONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 302 : // RelOp ::= SOME_ARROW_SOME 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 301 : // RelOp ::= SOME_ARROW_ANY 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 300 : // RelOp ::= ANY_ARROW_LONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 299 : // RelOp ::= ANY_ARROW_ONE 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 298 : // RelOp ::= ANY_ARROW_SOME 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 297 : // RelOp ::= ARROW 
            {
                Pair<Pos,ExprBinary.Op> RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelOp", 56, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 296 : // IntersectExprB ::= IntersectExprB AMPERSAND RelationExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.INTERSECT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB", 37, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 295 : // IntersectExprB ::= RelationExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprB", 37, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 294 : // IntersectExprA ::= IntersectExprB AMPERSAND Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.INTERSECT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA", 36, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 293 : // IntersectExprA ::= RelationExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExprA", 36, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 292 : // OverrideExprB ::= OverrideExprB PLUSPLUS IntersectExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.PLUSPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB", 52, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 291 : // OverrideExprB ::= IntersectExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprB", 52, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 290 : // OverrideExprA ::= OverrideExprB PLUSPLUS Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.PLUSPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA", 51, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 289 : // OverrideExprA ::= IntersectExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExprA", 51, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 288 : // NumUnopExprB ::= INT NumUnopExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB", 48, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 287 : // NumUnopExprB ::= SUM NumUnopExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB", 48, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 286 : // NumUnopExprB ::= HASH NumUnopExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CARDINALITY.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB", 48, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 285 : // NumUnopExprB ::= OverrideExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprB", 48, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 284 : // NumUnopExprA ::= INT NumUnopExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA", 47, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 283 : // NumUnopExprA ::= SUM NumUnopExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA", 47, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 282 : // NumUnopExprA ::= HASH NumUnopExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CARDINALITY.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA", 47, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 281 : // NumUnopExprA ::= INT Bind 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA", 47, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 280 : // NumUnopExprA ::= SUM Bind 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CAST2SIGINT.make(o, ExprUnary.Op.CAST2INT.make(o, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA", 47, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 279 : // NumUnopExprA ::= HASH Bind 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CARDINALITY.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA", 47, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 278 : // NumUnopExprA ::= OverrideExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExprA", 47, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 277 : // MulExprB ::= MulExprB INTREM NumUnopExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.REM.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB", 76, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 276 : // MulExprB ::= MulExprB INTDIV NumUnopExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.DIV.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB", 76, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 275 : // MulExprB ::= MulExprB INTMUL NumUnopExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.MUL.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB", 76, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 274 : // MulExprB ::= NumUnopExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprB", 76, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 273 : // MulExprA ::= MulExprB INTREM Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.REM.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA", 75, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 272 : // MulExprA ::= MulExprB INTDIV Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.DIV.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA", 75, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 271 : // MulExprA ::= MulExprB INTMUL Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.MUL.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA", 75, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 270 : // MulExprA ::= NumUnopExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MulExprA", 75, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 269 : // UnionDiffExprB ::= UnionDiffExprB INTSUB MulExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB", 78, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 268 : // UnionDiffExprB ::= UnionDiffExprB INTADD MulExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB", 78, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 267 : // UnionDiffExprB ::= UnionDiffExprB MINUS MulExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.MINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB", 78, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 266 : // UnionDiffExprB ::= UnionDiffExprB PLUS MulExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.PLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB", 78, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 265 : // UnionDiffExprB ::= MulExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprB", 78, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 264 : // UnionDiffExprA ::= UnionDiffExprB INTSUB Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA", 77, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 263 : // UnionDiffExprA ::= UnionDiffExprB INTADD Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IPLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA", 77, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 262 : // UnionDiffExprA ::= UnionDiffExprB MINUS Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.MINUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA", 77, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 261 : // UnionDiffExprA ::= UnionDiffExprB PLUS Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.PLUS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA", 77, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 260 : // UnionDiffExprA ::= MulExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExprA", 77, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 259 : // ShiftExprB ::= ShiftExprB SHA UnionDiffExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.SHA.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB", 74, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 258 : // ShiftExprB ::= ShiftExprB SHR UnionDiffExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.SHR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB", 74, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 257 : // ShiftExprB ::= ShiftExprB SHL UnionDiffExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.SHL.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB", 74, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 256 : // ShiftExprB ::= UnionDiffExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprB", 74, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 255 : // ShiftExprA ::= ShiftExprB SHA Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.SHA.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA", 73, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 254 : // ShiftExprA ::= ShiftExprB SHR Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.SHR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA", 73, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 253 : // ShiftExprA ::= ShiftExprB SHL Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.SHL.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA", 73, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 252 : // ShiftExprA ::= UnionDiffExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ShiftExprA", 73, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 251 : // CompareExprB ::= ShiftExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 250 : // CompareExprB ::= SEQ ShiftExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b);
                parser.alloymodule.addSeq(o);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 249 : // CompareExprB ::= SET ShiftExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.SETOF.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 248 : // CompareExprB ::= ONE ShiftExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.ONE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 247 : // CompareExprB ::= LONE ShiftExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.LONE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 246 : // CompareExprB ::= SOME ShiftExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.SOME.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 245 : // CompareExprB ::= NO ShiftExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.NO.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 244 : // CompareExprB ::= ALL ShiftExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                if (1 == 1)
                    throw new ErrorSyntax(o, "The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\".");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 243 : // CompareExprB ::= CompareExprB NOTGTE ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_GTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 242 : // CompareExprB ::= CompareExprB NOTLTE ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_LTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 241 : // CompareExprB ::= CompareExprB NOTGT ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_GT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 240 : // CompareExprB ::= CompareExprB NOTLT ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_LT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 239 : // CompareExprB ::= CompareExprB NOTEQUALS ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 238 : // CompareExprB ::= CompareExprB NOTIN ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_IN.make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 237 : // CompareExprB ::= CompareExprB GTE ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.GTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 236 : // CompareExprB ::= CompareExprB LTE ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.LTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 235 : // CompareExprB ::= CompareExprB GT ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.GT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 234 : // CompareExprB ::= CompareExprB LT ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.LT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 233 : // CompareExprB ::= CompareExprB EQUALS ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.EQUALS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 232 : // CompareExprB ::= CompareExprB IN ShiftExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IN.make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprB", 7, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 231 : // CompareExprA ::= ShiftExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 230 : // CompareExprA ::= SEQ ShiftExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.ISSEQ_ARROW_LONE.make(o, null, ExprVar.make(o, "seq/Int"), b);
                parser.alloymodule.addSeq(o);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 229 : // CompareExprA ::= SET ShiftExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.SETOF.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 228 : // CompareExprA ::= ONE ShiftExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.ONE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 227 : // CompareExprA ::= LONE ShiftExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.LONE.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 226 : // CompareExprA ::= SOME ShiftExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.SOME.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 225 : // CompareExprA ::= NO ShiftExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.NO.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 224 : // CompareExprA ::= ALL ShiftExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                if (1 == 1)
                    throw new ErrorSyntax(o, "The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\".");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 223 : // CompareExprA ::= CompareExprB NOTGTE ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_GTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 222 : // CompareExprA ::= CompareExprB NOTLTE ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_LTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 221 : // CompareExprA ::= CompareExprB NOTGT ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_GT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 220 : // CompareExprA ::= CompareExprB NOTLT ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_LT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 219 : // CompareExprA ::= CompareExprB NOTEQUALS ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_EQUALS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 218 : // CompareExprA ::= CompareExprB NOTIN ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.NOT_IN.make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 217 : // CompareExprA ::= CompareExprB GTE ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.GTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 216 : // CompareExprA ::= CompareExprB LTE ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.LTE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 215 : // CompareExprA ::= CompareExprB GT ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.GT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 214 : // CompareExprA ::= CompareExprB LT ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.LT.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 213 : // CompareExprA ::= CompareExprB EQUALS ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.EQUALS.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 212 : // CompareExprA ::= CompareExprB IN ShiftExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IN.make(o, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExprA", 6, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 211 : // NegExprB ::= NOT NegExprB 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.NOT.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB", 46, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 210 : // NegExprB ::= CompareExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprB", 46, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 209 : // NegExprA ::= NOT NegExprA 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.NOT.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA", 45, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 208 : // NegExprA ::= NOT Bind 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.NOT.make(o, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA", 45, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 207 : // NegExprA ::= CompareExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExprA", 45, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 206 : // AndExprB ::= AndExprB AND NegExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.AND.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB", 1, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 205 : // AndExprB ::= NegExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprB", 1, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 204 : // AndExprA ::= AndExprB AND Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.AND.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA", 0, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 203 : // AndExprA ::= NegExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExprA", 0, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 202 : // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB", 35, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 201 : // ImpliesExprOpenB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o, a, b, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenB", 35, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 200 : // ImpliesExprCloseB ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o, a, b, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB", 33, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 199 : // ImpliesExprCloseB ::= AndExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseB", 33, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 198 : // ImpliesExprB ::= ImpliesExprOpenB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB", 31, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 197 : // ImpliesExprB ::= ImpliesExprCloseB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprB", 31, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 196 : // ImpliesExprOpenA ::= AndExprB IMPLIES Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA", 34, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 195 : // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o, a, b, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA", 32, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 194 : // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IMPLIES.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA", 34, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 193 : // ImpliesExprOpenA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprOpenA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o, a, b, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpenA", 34, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 192 : // ImpliesExprCloseA ::= AndExprB IMPLIES ImpliesExprCloseB ELSE ImpliesExprCloseA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr c = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprITE.make(o, a, b, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA", 32, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 191 : // ImpliesExprCloseA ::= AndExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprCloseA", 32, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 190 : // ImpliesExprA ::= ImpliesExprOpenA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA", 30, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 189 : // ImpliesExprA ::= ImpliesExprCloseA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprA", 30, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 188 : // EquivExprB ::= EquivExprB IFF ImpliesExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IFF.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB", 20, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 187 : // EquivExprB ::= ImpliesExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprB", 20, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 186 : // EquivExprA ::= EquivExprB IFF Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.IFF.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA", 19, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 185 : // EquivExprA ::= ImpliesExprA 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExprA", 19, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 184 : // OrExprB ::= OrExprB OR EquivExprB 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.OR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB", 50, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 183 : // OrExprB ::= EquivExprB 
            {
                Expr RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprB", 50, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 182 : // OrExprA ::= OrExprB OR Bind 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.OR.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA", 49, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 181 : // OrExprA ::= EquivExprA 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExprA", 49, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 180 : // Bind ::= SUM2 Declp SuperOrBar 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.SUM.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind", 3, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 179 : // Bind ::= ONE2 Declp SuperOrBar 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.ONE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind", 3, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 178 : // Bind ::= LONE2 Declp SuperOrBar 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.LONE.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind", 3, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 177 : // Bind ::= SOME2 Declp SuperOrBar 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.SOME.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind", 3, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 176 : // Bind ::= NO2 Declp SuperOrBar 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.NO.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind", 3, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 175 : // Bind ::= ALL2 Declp SuperOrBar 
            {
                Expr RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Decl> a = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprQt.Op.ALL.make(o, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind", 3, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 174 : // Bind ::= LET Let 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Bind", 3, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 173 : // Expr ::= Bind 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr", 22, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 172 : // Expr ::= OrExprB 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr", 22, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 171 : // Expr ::= OrExprA 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr", 22, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 170 : // Exprp ::= Exprp COMMA Expr 
            {
                List<Expr> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Expr> a = (List<Expr>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                a.add(b);
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp", 28, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 169 : // Exprp ::= Expr 
            {
                List<Expr> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Expr>();
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp", 28, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 168 : // Exprs ::= Exprp 
            {
                List<Expr> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<Expr> x = (List<Expr>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs", 27, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 167 : // Exprs ::= 
            {
                List<Expr> RESULT = null;
                RESULT = new ArrayList<Expr>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs", 27, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 166 : // SuperOrBar ::= Super 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar", 26, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 165 : // SuperOrBar ::= BAR Expr 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar", 26, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 164 : // SuperP ::= SuperP Expr 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprBinary.Op.AND.make(null, null, a, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP", 25, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 163 : // SuperP ::= Expr 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP", 25, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 162 : // Super ::= LBRACE RBRACE 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprConstant.Op.TRUE.make(a.merge(b), 0);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super", 23, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 161 : // Super ::= LBRACE SuperP RBRACE 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.NOOP.make(a.merge(b), x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super", 23, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 160 : // Super ::= CMD LBRACE SuperP RBRACE 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprUnary.Op.CMD.make(a.merge(b), x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super", 23, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 159 : // SuperOpt ::= Super 
            {
                Expr RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt", 24, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 158 : // SuperOpt ::= 
            {
                Expr RESULT = null;
                RESULT = null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt", 24, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 157 : // Let ::= Name EQUALS Expr COMMA Let 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                nod(a);
                if (a.label.indexOf('/') >= 0)
                    throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
                if (a.label.indexOf('@') >= 0)
                    throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
                RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let", 38, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 156 : // Let ::= Name EQUALS Expr SuperOrBar 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr x = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                nod(a);
                if (a.label.indexOf('/') >= 0)
                    throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
                if (a.label.indexOf('@') >= 0)
                    throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
                RESULT = ExprLet.make(o, ExprVar.make(a.pos, a.label), b, x);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let", 38, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 155 : // Decls ::= COMMA Decls 
            {
                List<Decl> RESULT = null;
                int yleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int yright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<Decl> y = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = y;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls", 13, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 154 : // Decls ::= Declb COMMA Decls 
            {
                List<Decl> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Decl x = (Decl) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int yleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int yright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<Decl> y = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = y;
                RESULT.add(0, x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls", 13, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 153 : // Decls ::= Declb 
            {
                List<Decl> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Decl x = (Decl) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Decl>();
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls", 13, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 152 : // Decls ::= 
            {
                List<Decl> RESULT = null;
                RESULT = new ArrayList<Decl>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls", 13, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 151 : // Declp ::= Declb 
            {
                List<Decl> RESULT = null;
                int yleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int yright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Decl y = (Decl) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Decl>();
                RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp", 12, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 150 : // Declp ::= Declp COMMA Declb 
            {
                List<Decl> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> x = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int yleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int yright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Decl y = (Decl) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp", 12, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 149 : // Declz ::= Decla 
            {
                List<Decl> RESULT = null;
                int yleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int yright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Decl y = (Decl) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Decl>();
                RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz", 14, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 148 : // Declz ::= Declz COMMA Decla 
            {
                List<Decl> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> x = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int yleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int yright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Decl y = (Decl) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                RESULT.add(y);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declz", 14, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 147 : // Declb ::= Names EQUALS DISJ Expr 
            {
                Decl RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                if (1 == 1)
                    throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 146 : // Declb ::= PRIVATE Names EQUALS DISJ Expr 
            {
                Decl RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                if (1 == 1)
                    throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 145 : // Declb ::= PRIVATE DISJ Names EQUALS DISJ Expr 
            {
                Decl RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                if (1 == 1)
                    throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 144 : // Declb ::= DISJ Names EQUALS DISJ Expr 
            {
                Decl RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                if (1 == 1)
                    throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 143 : // Declb ::= EXH Names EQUALS DISJ Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 142 : // Declb ::= PART Names EQUALS DISJ Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 141 : // Declb ::= Names EQUALS Expr 
            {
                Decl RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(null, null, null, a, ExprUnary.Op.EXACTLYOF.make(null, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 140 : // Declb ::= PRIVATE Names EQUALS Expr 
            {
                Decl RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(p, null, null, a, ExprUnary.Op.EXACTLYOF.make(null, b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 139 : // Declb ::= PRIVATE DISJ Names EQUALS Expr 
            {
                Decl RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                if (1 == 1)
                    throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 138 : // Declb ::= DISJ Names EQUALS Expr 
            {
                Decl RESULT = null;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                if (1 == 1)
                    throw new ErrorSyntax(d, "Defined fields cannot be disjoint.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 137 : // Declb ::= EXH Names EQUALS Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 136 : // Declb ::= PART Names EQUALS Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 135 : // Declb ::= Decla 
            {
                Decl RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Decl x = (Decl) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declb", 11, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 134 : // Decla ::= Names COLON DISJ Expr 
            {
                Decl RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(null, null, d, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 133 : // Decla ::= PRIVATE Names COLON DISJ Expr 
            {
                Decl RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(p, null, d, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 132 : // Decla ::= PRIVATE DISJ Names COLON DISJ Expr 
            {
                Decl RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(p, k, d, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 131 : // Decla ::= DISJ Names COLON DISJ Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos d = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(null, k, d, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 130 : // Decla ::= EXH Names COLON DISJ Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 129 : // Decla ::= PART Names COLON DISJ Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 128 : // Decla ::= Names COLON Expr 
            {
                Decl RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(null, null, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 127 : // Decla ::= PRIVATE Names COLON Expr 
            {
                Decl RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(p, null, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 126 : // Decla ::= PRIVATE DISJ Names COLON Expr 
            {
                Decl RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(p, k, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 125 : // Decla ::= DISJ Names COLON Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr b = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new Decl(null, k, null, a, mult(b));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 124 : // Decla ::= EXH Names COLON Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "exh");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 123 : // Decla ::= PART Names COLON Expr 
            {
                Decl RESULT = null;
                int kleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int kright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos k = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                if (1 == 1)
                    throw CompModule.hint(k, "part");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla", 10, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 122 : // Namex ::= Namex COMMA EXACTLY Name 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(b);
                a.add(null);
                a.add(b);
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex", 44, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 121 : // Namex ::= Namex COMMA Name 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(b);
                a.add(b);
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex", 44, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 120 : // Namex ::= EXACTLY Name 
            {
                List<ExprVar> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x);
                RESULT = new ArrayList<ExprVar>();
                RESULT.add(null);
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex", 44, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 119 : // Namex ::= Name 
            {
                List<ExprVar> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x);
                RESULT = new ArrayList<ExprVar>();
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Namex", 44, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 118 : // Names ::= Names COMMA Name 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(b);
                a.add(b);
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names", 43, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 117 : // Names ::= Name 
            {
                List<ExprVar> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(x);
                RESULT = new ArrayList<ExprVar>();
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names", 43, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 116 : // NameHelper ::= NameHelper SLASH ID 
            {
                ExprVar RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(a.pos.merge(b.pos), a.label + "/" + b.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper", 42, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 115 : // NameHelper ::= ID 
            {
                ExprVar RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper", 42, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 114 : // Name ::= SEQ SLASH NameHelper 
            {
                ExprVar RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(a.merge(b.pos), "seq/" + b.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name", 41, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 113 : // Name ::= THIS SLASH NameHelper 
            {
                ExprVar RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(a.merge(b.pos), "this/" + b.label);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name", 41, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 112 : // Name ::= NameHelper 
            {
                ExprVar RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name", 41, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 111 : // SigRefu ::= SigRefu PLUS SigRef 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                a.add(b);
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu", 67, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 110 : // SigRefu ::= SigRef 
            {
                List<ExprVar> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<ExprVar>();
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu", 67, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 109 : // SigRefp ::= SigRefp COMMA SigRef 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> a = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                a.add(b);
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp", 65, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 108 : // SigRefp ::= SigRef 
            {
                List<ExprVar> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<ExprVar>();
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp", 65, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 107 : // SigRefs ::= SigRefp 
            {
                List<ExprVar> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<ExprVar> x = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs", 66, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 106 : // SigRefs ::= 
            {
                List<ExprVar> RESULT = null;
                RESULT = new ArrayList<ExprVar>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs", 66, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 105 : // SigRef ::= NONE 
            {
                ExprVar RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(x, "none");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef", 64, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 104 : // SigRef ::= SEQ SLASH SIGINT 
            {
                ExprVar RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(a.merge(b), "seq/Int");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef", 64, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 103 : // SigRef ::= SIGINT 
            {
                ExprVar RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(x, "Int");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef", 64, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 102 : // SigRef ::= STRING 
            {
                ExprVar RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(x, "String");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef", 64, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 101 : // SigRef ::= UNIV 
            {
                ExprVar RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(x, "univ");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef", 64, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 100 : // SigRef ::= Name 
            {
                ExprVar RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef", 64, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 99 : // SigIn ::= 
            {
                List<ExprVar> RESULT = null;
                RESULT = null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn", 61, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 98 : // SigIn ::= EQUALS SigRefu 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<ExprVar> x = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                x.add(ExprVar.make(a, "="));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn", 61, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 97 : // SigIn ::= IN SigRefu 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<ExprVar> x = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = x;
                x.add(ExprVar.make(a, "in"));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn", 61, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 96 : // SigIn ::= EXTENDS SigRef 
            {
                List<ExprVar> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos a = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<ExprVar>(2);
                RESULT.add(x);
                RESULT.add(ExprVar.make(a, "extends"));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn", 61, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 95 : // SigQuals ::= SigQual SigQuals 
            {
                List<Pos> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<Pos> a = (List<Pos>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<Pos> b = (List<Pos>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                for (int i = 0; i < 5; i++)
                    if (a.get(i) == null)
                        a.set(i, b.get(i));
                    else if (b.get(i) != null)
                        throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals", 63, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 94 : // SigQuals ::= SIG 
            {
                List<Pos> RESULT = null;
                RESULT = new ArrayList<Pos>(5);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals", 63, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 93 : // SigQual ::= PRIVATE 
            {
                List<Pos> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Pos>(5);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(x);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual", 62, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 92 : // SigQual ::= SOME 
            {
                List<Pos> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Pos>(5);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(x);
                RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual", 62, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 91 : // SigQual ::= ONE 
            {
                List<Pos> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Pos>(5);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(x);
                RESULT.add(null);
                RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual", 62, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 90 : // SigQual ::= LONE 
            {
                List<Pos> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Pos>(5);
                RESULT.add(null);
                RESULT.add(x);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual", 62, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 89 : // SigQual ::= ABSTRACT 
            {
                List<Pos> RESULT = null;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos x = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<Pos>(5);
                RESULT.add(x);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                RESULT.add(null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual", 62, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 88 : // Sig ::= SigQuals Names SigIn LBRACE Decls RBRACE SuperOpt 
            {
                Object RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                List<Pos> a = (List<Pos>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                List<ExprVar> b = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                List<ExprVar> c = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                if (e == null)
                    e = ExprConstant.Op.TRUE.make(o, 0);
                ExprVar cc = (c != null && c.size() > 0) ? c.remove(c.size() - 1) : null;
                for (ExprVar bb : b) {
                    parser.alloymodule.addSig(bb.label, cc, c, d, e, AttrType.WHERE.makenull(bb.pos.merge(e == null ? o : e.span())), AttrType.ABSTRACT.makenull(a.get(0)), AttrType.LONE.makenull(a.get(1)), AttrType.ONE.makenull(a.get(2)), AttrType.SOME.makenull(a.get(3)), AttrType.PRIVATE.makenull(a.get(4)));
                }

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig", 60, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 87 : // Vis ::= PRIVATE 
            {
                Pos RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = p;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis", 81, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 86 : // Vis ::= 
            {
                Pos RESULT = null;
                RESULT = null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Vis", 81, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 85 : // Valuation ::= Vis VAL Name Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null, null, v, true, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Valuation", 82, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 84 : // Valuation ::= Vis VAL SigRef DOT Name Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar f = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f, null, null, v, true, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Valuation", 82, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 83 : // Predicate ::= Vis PRED SigRef DOT Name Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar f = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f, null, null, v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate", 53, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 82 : // Predicate ::= Vis PRED SigRef DOT Name LBRACKET Decls RBRACKET Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                ExprVar f = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f, d, null, v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate", 53, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 81 : // Predicate ::= Vis PRED SigRef DOT Name LPAREN Decls RPAREN Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                ExprVar f = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f, d, null, v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate", 53, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 80 : // Predicate ::= Vis PRED Name Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null, null, v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate", 53, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 79 : // Predicate ::= Vis PRED Name LBRACKET Decls RBRACKET Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d, null, v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate", 53, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 78 : // Predicate ::= Vis PRED Name LPAREN Decls RPAREN Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d, null, v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate", 53, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 77 : // Function ::= Vis FUN SigRef DOT Name COLON Expr Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                ExprVar f = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f, null, mult(r), v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function", 29, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 76 : // Function ::= Vis FUN SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 9)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 9)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 9)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).right;
                ExprVar f = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f, d, mult(r), v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function", 29, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 75 : // Function ::= Vis FUN SigRef DOT Name LPAREN Decls RPAREN COLON Expr Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 9)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 9)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 9)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).right;
                ExprVar f = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, f, d, mult(r), v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function", 29, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 10)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 74 : // Function ::= Vis FUN Name COLON Expr Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, null, mult(r), v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function", 29, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 73 : // Function ::= Vis FUN Name LBRACKET Decls RBRACKET COLON Expr Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d, mult(r), v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function", 29, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 72 : // Function ::= Vis FUN Name LPAREN Decls RPAREN COLON Expr Super 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                List<Decl> d = (List<Decl>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Expr r = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFunc(o.merge(v.span()), p, n.label, null, d, mult(r), v, false, false);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function", 29, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 71 : // MacroBody ::= EQUALS Expr 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody", 40, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 70 : // MacroBody ::= Super 
            {
                Expr RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr a = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("MacroBody", 40, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 69 : // Macro ::= Vis LET Name MacroBody 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null, v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro", 39, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 68 : // Macro ::= Vis LET Name LBRACKET RBRACKET MacroBody 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null, v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro", 39, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 67 : // Macro ::= Vis LET Name LBRACKET Names RBRACKET MacroBody 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> d = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d, v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro", 39, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 66 : // Macro ::= Vis LET Name LPAREN RPAREN MacroBody 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, null, v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro", 39, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 65 : // Macro ::= Vis LET Name LPAREN Names RPAREN MacroBody 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int dleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int dright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<ExprVar> d = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int vright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr v = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addMacro(o.merge(v.span()), p, n.label, d, v);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Macro", 39, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 64 : // TypeNumber ::= NUMBER COLON NUMBER 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant i = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental)
                    throw new ErrorSyntax(a.pos, "Syntax error here.");
                RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, Integer.MAX_VALUE, i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 63 : // TypeNumber ::= NUMBER DOT DOT NUMBER COLON NUMBER 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprConstant b = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant i = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental)
                    throw new ErrorSyntax(a.pos, "Syntax error here.");
                RESULT = new CommandScope(a.pos.merge(i.pos), Sig.NONE, false, a.num, b.num, i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 62 : // TypeNumber ::= NUMBER DOT DOT NUMBER 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant b = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental)
                    throw new ErrorSyntax(a.pos, "Syntax error here.");
                RESULT = new CommandScope(a.pos.merge(b.pos), Sig.NONE, false, a.num, b.num, 1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 61 : // TypeNumber ::= NUMBER 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new CommandScope(a.pos, Sig.NONE, false, a.num, a.num, 1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 60 : // TypeNumber ::= EXACTLY NUMBER COLON NUMBER 
            {
                CommandScope RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos e = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant i = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental)
                    throw new ErrorSyntax(a.pos, "Syntax error here.");
                RESULT = new CommandScope(e.merge(i.pos), Sig.NONE, true, a.num, Integer.MAX_VALUE, i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 59 : // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER COLON NUMBER 
            {
                CommandScope RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                Pos e = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprConstant b = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int ileft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int iright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant i = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental)
                    throw new ErrorSyntax(a.pos, "Syntax error here.");
                RESULT = new CommandScope(e.merge(i.pos), Sig.NONE, true, a.num, b.num, i.num);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 58 : // TypeNumber ::= EXACTLY NUMBER DOT DOT NUMBER 
            {
                CommandScope RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos e = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant b = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (!Version.experimental)
                    throw new ErrorSyntax(a.pos, "Syntax error here.");
                RESULT = new CommandScope(e.merge(b.pos), Sig.NONE, true, a.num, b.num, 1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 57 : // TypeNumber ::= EXACTLY NUMBER 
            {
                CommandScope RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos e = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new CommandScope(e.merge(a.pos), Sig.NONE, true, a.num, a.num, 1);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("TypeNumber", 70, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 56 : // Typescope ::= TypeNumber NONE 
            {
                CommandScope RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                CommandScope e = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos f = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (1 == 1)
                    throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope", 71, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 55 : // Typescope ::= TypeNumber STRING 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                CommandScope a = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new CommandScope(a.pos.merge(b), new PrimSig("String", AttrType.WHERE.make(a.pos.merge(b))), a.isExact, a.startingScope, a.endingScope, a.increment);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope", 71, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 54 : // Typescope ::= TypeNumber UNIV 
            {
                CommandScope RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                CommandScope e = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int fleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int fright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos f = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                if (1 == 1)
                    throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ.");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope", 71, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 53 : // Typescope ::= TypeNumber SEQ 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                CommandScope a = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                Pos p = a.pos.merge(b);
                if (a.endingScope > a.startingScope)
                    throw new ErrorSyntax(p, "Cannot specify a growing scope for \"seq\"");
                if (a.isExact)
                    throw new ErrorSyntax(p, "The exactly keyword is redundant here since the number of sequence index has to be exact.");
                RESULT = new CommandScope(p, new PrimSig("seq", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope", 71, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 52 : // Typescope ::= TypeNumber INT 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                CommandScope a = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                Pos p = a.pos.merge(b);
                if (a.endingScope > a.startingScope)
                    throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
                if (a.isExact)
                    throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
                RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope", 71, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 51 : // Typescope ::= TypeNumber SIGINT 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                CommandScope a = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos b = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                Pos p = a.pos.merge(b);
                if (a.endingScope > a.startingScope)
                    throw new ErrorSyntax(p, "Cannot specify a growing scope for \"Int\"");
                if (a.isExact)
                    throw new ErrorSyntax(p, "The exactly keyword is redundant here since the integer bitwidth must be exact.");
                RESULT = new CommandScope(p, new PrimSig("int", AttrType.WHERE.make(p)), a.isExact, a.startingScope, a.startingScope, 1);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope", 71, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 50 : // Typescope ::= TypeNumber Name 
            {
                CommandScope RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                CommandScope a = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar b = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;

                nod(b);
                RESULT = new CommandScope(a.pos.merge(b.pos), new PrimSig(b.label, AttrType.WHERE.make(a.pos.merge(b.pos))), a.isExact, a.startingScope, a.endingScope, a.increment);

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope", 71, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 49 : // Typescopes ::= Typescopes COMMA Typescope 
            {
                List<CommandScope> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                List<CommandScope> a = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                CommandScope b = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                a.add(b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes", 72, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 48 : // Typescopes ::= Typescope 
            {
                List<CommandScope> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                CommandScope a = (CommandScope) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<CommandScope>();
                RESULT.add(a);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes", 72, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 47 : // Scope ::= 
            {
                List<CommandScope> RESULT = null;
                RESULT = new ArrayList<CommandScope>();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope", 59, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 46 : // Scope ::= FOR Typescopes 
            {
                List<CommandScope> RESULT = null;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<CommandScope> b = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope", 59, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 45 : // Scope ::= FOR NUMBER BUT Typescopes 
            {
                List<CommandScope> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                List<CommandScope> b = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = b;
                b.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope", 59, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 44 : // Scope ::= FOR NUMBER 
            {
                List<CommandScope> RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = new ArrayList<CommandScope>();
                RESULT.add(new CommandScope(a.pos, new PrimSig("univ", AttrType.WHERE.make(a.pos)), true, a.num, a.num, 1));
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope", 59, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 43 : // Expects ::= EXPECT NUMBER 
            {
                ExprConstant RESULT = null;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant a = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = a;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects", 21, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 42 : // Expects ::= 
            {
                ExprConstant RESULT = null;
                RESULT = null;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects", 21, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 41 : // Testcase ::= TEST Command IMPLIES CommandPrefix Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(true, o, null, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 40 : // Testcase ::= TEST Command IMPLIES CommandPrefix Name Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(true, o, x, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 39 : // Testcase ::= TEST CommandPrefix Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(false, o, null, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 38 : // Testcase ::= TEST CommandPrefix Name Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(false, o, x, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 37 : // Testcase ::= TEST Command IMPLIES CommandPrefix Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(true, o, null, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 36 : // Testcase ::= TEST Command IMPLIES CommandPrefix Name Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(true, o, x, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 35 : // Testcase ::= TEST CommandPrefix Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(false, o, null, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 34 : // Testcase ::= TEST CommandPrefix Name Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                tc(false, o, x, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Testcase", 83, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 33 : // Command ::= Command IMPLIES CommandPrefix Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true, o, null, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 32 : // Command ::= Command IMPLIES CommandPrefix Name Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true, o, x, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 31 : // Command ::= CommandPrefix Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false, o, null, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 30 : // Command ::= CommandPrefix Name Name Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false, o, x, n, null, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 29 : // Command ::= Command IMPLIES CommandPrefix Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true, o, null, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 28 : // Command ::= Command IMPLIES CommandPrefix Name Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(true, o, x, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 27 : // Command ::= CommandPrefix Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false, o, null, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 26 : // Command ::= CommandPrefix Name Super Scope Expects 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                ExprVar o = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int xleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int xright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar x = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int sleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int sright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<CommandScope> s = (List<CommandScope>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprConstant c = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                c(false, o, x, null, e, s, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Command", 8, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 25 : // CommandPrefix ::= RUN 
            {
                ExprVar RESULT = null;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos r = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(r, "r");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix", 9, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 24 : // CommandPrefix ::= CHECK 
            {
                ExprVar RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                RESULT = ExprVar.make(c, "c");
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CommandPrefix", 9, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 23 : // Spec ::= 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 22 : // Spec ::= Spec Command 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 21 : // Spec ::= Spec Macro 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 20 : // Spec ::= Spec Testcase 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 19 : // Spec ::= Spec Valuation 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 18 : // Spec ::= Spec Predicate 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 17 : // Spec ::= Spec Function 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 16 : // Spec ::= Spec Sig 
            {
                Object RESULT = null;

                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 15 : // Spec ::= Spec ASSERT STR Super 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprConstant n = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                parser.alloymodule.addAssertion(o, n.string, e);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 14 : // Spec ::= Spec ASSERT Name Super 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addAssertion(o, n.label, e);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 13 : // Spec ::= Spec ASSERT Super 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                parser.alloymodule.addAssertion(o, "", e);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 12 : // Spec ::= Spec FACT STR Super 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprConstant n = (ExprConstant) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                parser.alloymodule.addFact(o, n.string, e);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 11 : // Spec ::= Spec FACT Name Super 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addFact(o, n.label, e);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 10 : // Spec ::= Spec FACT Super 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Expr e = (Expr) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                parser.alloymodule.addFact(o, "", e);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 9 : // Spec ::= Spec Vis ENUM Name LBRACE RBRACE 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);
                parser.alloymodule.addEnum(o.merge(c), p, a, null, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 8 : // Spec ::= Spec Vis ENUM Name LBRACE Names RBRACE 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<ExprVar> n = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);
                parser.alloymodule.addEnum(o.merge(c), p, a, n, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 7 : // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 7)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                List<ExprVar> b = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar c = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);
                nod(c);
                parser.alloymodule.addOpen(o.merge(c.pos), p, a, b, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 8)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 6 : // Spec ::= Spec Vis OPEN Name LBRACKET SigRefs RBRACKET 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<ExprVar> b = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos c = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);
                parser.alloymodule.addOpen(o.merge(c), p, a, b, null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 6)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 5 : // Spec ::= Spec Vis OPEN Name AS Name 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int cleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar c = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);
                nod(c);
                parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 4 : // Spec ::= Spec Vis OPEN Name 
            {
                Object RESULT = null;
                int pleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).left;
                int pright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).right;
                Pos p = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)).value;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int aleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int aright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar a = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(a);
                parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 3 : // Spec ::= Spec MODULE Name LBRACKET Namex RBRACKET 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 4)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 3)).value;
                int bleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int bright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                List<ExprVar> b = (List<ExprVar>) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int rleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int rright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                Pos r = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                nod(b);
                parser.alloymodule.addModelName(o.merge(r), n.label, b);
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 5)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 2 : // Spec ::= Spec MODULE Name 
            {
                Object RESULT = null;
                int oleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int oright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Pos o = (Pos) ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                int nleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).left;
                int nright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).right;
                ExprVar n = (ExprVar) ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()).value;
                nod(n);
                parser.alloymodule.addModelName(o.merge(n.pos), n.label, new ArrayList<ExprVar>());
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Spec", 69, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 2)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 1 : // $START ::= File EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).right;
                Object start_val = ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)).value;
                RESULT = start_val;
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top - 1)), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                /* ACCEPT */
                CUP$CompParser$parser.done_parsing();
                return CUP$CompParser$result;

            /* . . . . . . . . . . . . . . . . . . . . */
            case 0 : // File ::= Spec 
            {
                Object RESULT = null;
                parser.alloymodule.doneParsing();
                CUP$CompParser$result = parser.getSymbolFactory().newSymbol("File", 68, ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), ((java_cup.runtime.Symbol) CUP$CompParser$stack.peek()), RESULT);
            }
                return CUP$CompParser$result;

            /* . . . . . . */
            default :
                throw new Exception("Invalid action number found in internal parse table");

        }
    }
}

