/* The following code was generated by JFlex 1.4.1 on 3/2/21, 10:13 AM */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */


public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\76\1\100\1\65\1\0\1\100\1\77\16\76\4\0\1\100\1\1"+
    "\1\63\1\2\1\75\1\0\1\3\1\66\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\13\1\14\1\67\1\72\10\73\1\15\1\0\1\16"+
    "\1\17\1\12\1\0\1\20\6\71\2\75\1\56\11\75\1\61\1\62"+
    "\6\75\1\21\1\64\1\22\1\23\1\70\1\0\1\30\1\31\1\35"+
    "\1\40\1\41\1\55\1\60\1\43\1\45\1\46\1\44\1\36\1\50"+
    "\1\37\1\47\1\54\1\57\1\34\1\32\1\33\1\42\1\53\1\75"+
    "\1\51\1\52\1\75\1\24\1\25\1\26\1\27\41\76\2\0\4\74"+
    "\4\0\1\74\2\0\1\76\7\0\1\74\4\0\1\74\5\0\27\74"+
    "\1\0\37\74\1\0\u01ca\74\4\0\14\74\16\0\5\74\7\0\1\74"+
    "\1\0\1\74\21\0\160\76\5\74\1\0\2\74\2\0\4\74\1\0"+
    "\1\74\6\0\1\74\1\0\3\74\1\0\1\74\1\0\24\74\1\0"+
    "\123\74\1\0\213\74\1\0\5\76\2\0\246\74\1\0\46\74\2\0"+
    "\1\74\7\0\47\74\7\0\1\74\1\0\55\76\1\0\1\76\1\0"+
    "\2\76\1\0\2\76\1\0\1\76\10\0\33\74\5\0\3\74\15\0"+
    "\6\76\5\0\1\74\4\0\13\76\1\0\1\76\3\0\53\74\37\76"+
    "\4\0\2\74\1\76\143\74\1\0\1\74\10\76\1\0\6\76\2\74"+
    "\2\76\1\0\4\76\2\74\12\76\3\74\2\0\1\74\17\0\1\76"+
    "\1\74\1\76\36\74\33\76\2\0\131\74\13\76\1\74\16\0\12\76"+
    "\41\74\11\76\2\74\4\0\1\74\5\0\26\74\4\76\1\74\11\76"+
    "\1\74\3\76\1\74\5\76\22\0\31\74\3\76\4\0\13\74\65\0"+
    "\25\74\1\0\10\74\26\0\60\76\66\74\3\76\1\74\22\76\1\74"+
    "\7\76\12\74\2\76\2\0\12\76\1\0\20\74\3\76\1\0\10\74"+
    "\2\0\2\74\2\0\26\74\1\0\7\74\1\0\1\74\3\0\4\74"+
    "\2\0\1\76\1\74\7\76\2\0\2\76\2\0\3\76\1\74\10\0"+
    "\1\76\4\0\2\74\1\0\3\74\2\76\2\0\12\76\4\74\7\0"+
    "\2\74\4\0\3\76\1\0\6\74\4\0\2\74\2\0\26\74\1\0"+
    "\7\74\1\0\2\74\1\0\2\74\1\0\2\74\2\0\1\76\1\0"+
    "\5\76\4\0\2\76\2\0\3\76\3\0\1\76\7\0\4\74\1\0"+
    "\1\74\7\0\14\76\3\74\1\76\13\0\3\76\1\0\11\74\1\0"+
    "\3\74\1\0\26\74\1\0\7\74\1\0\2\74\1\0\5\74\2\0"+
    "\1\76\1\74\10\76\1\0\3\76\1\0\3\76\2\0\1\74\17\0"+
    "\2\74\2\76\2\0\12\76\1\0\1\74\7\0\1\74\6\76\1\0"+
    "\3\76\1\0\10\74\2\0\2\74\2\0\26\74\1\0\7\74\1\0"+
    "\2\74\1\0\5\74\2\0\1\76\1\74\7\76\2\0\2\76\2\0"+
    "\3\76\10\0\2\76\4\0\2\74\1\0\3\74\2\76\2\0\12\76"+
    "\1\0\1\74\20\0\1\76\1\74\1\0\6\74\3\0\3\74\1\0"+
    "\4\74\3\0\2\74\1\0\1\74\1\0\2\74\3\0\2\74\3\0"+
    "\3\74\3\0\14\74\4\0\5\76\3\0\3\76\1\0\4\76\2\0"+
    "\1\74\6\0\1\76\16\0\12\76\11\0\1\74\6\0\4\76\1\0"+
    "\10\74\1\0\3\74\1\0\27\74\1\0\20\74\3\0\1\74\7\76"+
    "\1\0\3\76\1\0\4\76\7\0\2\76\1\0\3\74\5\0\2\74"+
    "\2\76\2\0\12\76\20\0\1\74\3\76\1\0\10\74\1\0\3\74"+
    "\1\0\27\74\1\0\12\74\1\0\5\74\2\0\1\76\1\74\7\76"+
    "\1\0\3\76\1\0\4\76\7\0\2\76\7\0\1\74\1\0\2\74"+
    "\2\76\2\0\12\76\1\0\2\74\15\0\4\76\1\0\10\74\1\0"+
    "\3\74\1\0\51\74\2\76\1\74\7\76\1\0\3\76\1\0\4\76"+
    "\1\74\5\0\3\74\1\76\7\0\3\74\2\76\2\0\12\76\12\0"+
    "\6\74\2\0\2\76\1\0\22\74\3\0\30\74\1\0\11\74\1\0"+
    "\1\74\2\0\7\74\3\0\1\76\4\0\6\76\1\0\1\76\1\0"+
    "\10\76\6\0\12\76\2\0\2\76\15\0\60\74\1\76\2\74\7\76"+
    "\4\0\10\74\10\76\1\0\12\76\47\0\2\74\1\0\1\74\2\0"+
    "\2\74\1\0\1\74\2\0\1\74\6\0\4\74\1\0\7\74\1\0"+
    "\3\74\1\0\1\74\1\0\1\74\2\0\2\74\1\0\4\74\1\76"+
    "\2\74\6\76\1\0\2\76\1\74\2\0\5\74\1\0\1\74\1\0"+
    "\6\76\2\0\12\76\2\0\4\74\40\0\1\74\27\0\2\76\6\0"+
    "\12\76\13\0\1\76\1\0\1\76\1\0\1\76\4\0\2\76\10\74"+
    "\1\0\44\74\4\0\24\76\1\0\2\76\5\74\13\76\1\0\44\76"+
    "\11\0\1\76\71\0\53\74\24\76\1\74\12\76\6\0\6\74\4\76"+
    "\4\74\3\76\1\74\3\76\2\74\7\76\3\74\4\76\15\74\14\76"+
    "\1\74\17\76\2\0\46\74\1\0\1\74\5\0\1\74\2\0\53\74"+
    "\1\0\u014d\74\1\0\4\74\2\0\7\74\1\0\1\74\1\0\4\74"+
    "\2\0\51\74\1\0\4\74\2\0\41\74\1\0\4\74\2\0\7\74"+
    "\1\0\1\74\1\0\4\74\2\0\17\74\1\0\71\74\1\0\4\74"+
    "\2\0\103\74\2\0\3\76\40\0\20\74\20\0\126\74\2\0\6\74"+
    "\3\0\u026c\74\2\0\21\74\1\0\32\74\5\0\113\74\3\0\13\74"+
    "\7\0\15\74\1\0\4\74\3\76\13\0\22\74\3\76\13\0\22\74"+
    "\2\76\14\0\15\74\1\0\3\74\1\0\2\76\14\0\64\74\40\76"+
    "\3\0\1\74\3\0\2\74\1\76\2\0\12\76\41\0\4\76\1\0"+
    "\12\76\6\0\130\74\10\0\5\74\2\76\42\74\1\76\1\74\5\0"+
    "\106\74\12\0\37\74\1\0\14\76\4\0\14\76\12\0\12\76\36\74"+
    "\2\0\5\74\13\0\54\74\4\0\32\74\6\0\12\76\46\0\27\74"+
    "\5\76\4\0\65\74\12\76\1\0\35\76\2\0\13\76\6\0\12\76"+
    "\15\0\1\74\10\0\16\76\102\0\5\76\57\74\21\76\7\74\4\0"+
    "\12\76\21\0\11\76\14\0\3\76\36\74\15\76\2\74\12\76\54\74"+
    "\16\76\14\0\44\74\24\76\10\0\12\76\3\0\3\74\12\76\44\74"+
    "\2\0\11\74\107\0\3\76\1\0\25\76\4\74\1\76\4\74\3\76"+
    "\2\74\3\76\6\0\300\74\72\76\1\0\5\76\u0116\74\2\0\6\74"+
    "\2\0\46\74\2\0\6\74\2\0\10\74\1\0\1\74\1\0\1\74"+
    "\1\0\1\74\1\0\37\74\2\0\65\74\1\0\7\74\1\0\1\74"+
    "\3\0\3\74\1\0\7\74\3\0\4\74\2\0\6\74\4\0\15\74"+
    "\5\0\3\74\1\0\7\74\16\0\5\76\32\0\5\76\20\0\2\74"+
    "\23\0\1\74\13\0\5\76\1\0\12\76\1\0\1\74\15\0\1\74"+
    "\20\0\15\74\3\0\40\74\20\0\15\76\4\0\1\76\3\0\14\76"+
    "\21\0\1\74\4\0\1\74\2\0\12\74\1\0\1\74\3\0\5\74"+
    "\6\0\1\74\1\0\1\74\1\0\1\74\1\0\4\74\1\0\13\74"+
    "\2\0\4\74\5\0\5\74\4\0\1\74\21\0\51\74\u0a77\0\57\74"+
    "\1\0\57\74\1\0\205\74\6\0\4\74\3\76\2\74\14\0\46\74"+
    "\1\0\1\74\5\0\1\74\2\0\70\74\7\0\1\74\17\0\1\76"+
    "\27\74\11\0\7\74\1\0\7\74\1\0\7\74\1\0\7\74\1\0"+
    "\7\74\1\0\7\74\1\0\7\74\1\0\7\74\1\0\40\76\57\0"+
    "\1\74\u01d5\0\3\74\31\0\11\74\6\76\1\0\5\74\2\0\5\74"+
    "\4\0\126\74\2\0\2\76\2\0\3\74\1\0\132\74\1\0\4\74"+
    "\5\0\52\74\2\0\136\74\21\0\33\74\65\0\20\74\u0200\0\u19b6\74"+
    "\112\0\u51eb\74\25\0\u048d\74\103\0\56\74\2\0\u010d\74\3\0\20\74"+
    "\12\76\2\74\24\0\57\74\1\76\4\0\12\76\1\0\37\74\2\76"+
    "\120\74\2\76\45\0\11\74\2\0\147\74\2\0\44\74\1\0\10\74"+
    "\77\0\13\74\1\76\3\74\1\76\4\74\1\76\27\74\5\76\20\0"+
    "\1\74\7\0\64\74\14\0\2\76\62\74\22\76\12\0\12\76\6\0"+
    "\22\76\6\74\3\0\1\74\1\0\1\74\2\0\12\76\34\74\10\76"+
    "\2\0\27\74\15\76\14\0\35\74\3\0\4\76\57\74\16\76\16\0"+
    "\1\74\12\76\6\0\5\74\1\76\12\74\12\76\5\74\1\0\51\74"+
    "\16\76\11\0\3\74\1\76\10\74\2\76\2\0\12\76\6\0\27\74"+
    "\3\0\1\74\3\76\62\74\1\76\1\74\3\76\2\74\2\76\5\74"+
    "\2\76\1\74\1\76\1\74\30\0\3\74\2\0\13\74\5\76\2\0"+
    "\3\74\2\76\12\0\6\74\2\0\6\74\2\0\6\74\11\0\7\74"+
    "\1\0\7\74\1\0\53\74\1\0\12\74\12\0\163\74\10\76\1\0"+
    "\2\76\2\0\12\76\6\0\u2ba4\74\14\0\27\74\4\0\61\74\u2104\0"+
    "\u016e\74\2\0\152\74\46\0\7\74\14\0\5\74\5\0\1\74\1\76"+
    "\12\74\1\0\15\74\1\0\5\74\1\0\1\74\1\0\2\74\1\0"+
    "\2\74\1\0\154\74\41\0\u016b\74\22\0\100\74\2\0\66\74\50\0"+
    "\15\74\3\0\20\76\20\0\20\76\3\0\2\74\30\0\3\74\31\0"+
    "\1\74\6\0\5\74\1\0\207\74\2\0\1\76\4\0\1\74\13\0"+
    "\12\76\7\0\32\74\4\0\1\74\1\0\32\74\13\0\131\74\3\0"+
    "\6\74\2\0\6\74\2\0\6\74\2\0\3\74\3\0\2\74\3\0"+
    "\2\74\22\0\3\76\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\24\31\1\32\1\33\2\34\1\35\1\36\1\33"+
    "\1\37\1\40\1\41\1\0\1\42\1\43\1\44\1\45"+
    "\1\46\1\45\2\0\1\47\1\31\1\50\14\31\1\51"+
    "\5\31\1\52\3\31\1\47\13\31\1\53\1\0\3\54"+
    "\1\55\2\0\1\56\2\0\2\31\1\57\1\35\1\60"+
    "\1\61\1\62\1\63\1\64\2\31\1\65\1\31\1\66"+
    "\1\31\1\2\6\31\1\67\2\31\1\70\2\31\1\56"+
    "\1\71\2\31\1\72\4\31\1\73\1\74\1\75\1\31"+
    "\1\76\1\77\1\54\1\100\1\0\1\33\2\0\2\31"+
    "\1\101\1\102\1\31\1\103\1\104\1\105\1\106\1\107"+
    "\4\31\1\110\1\111\1\31\1\112\1\31\1\113\1\114"+
    "\1\31\1\115\1\31\1\116\1\117\2\31\1\120\13\31"+
    "\1\121\4\31\1\122\1\31\1\123\2\31\1\124\2\31"+
    "\1\125\1\126\1\31\1\46\1\31\1\127\1\130\1\105"+
    "\3\31\1\113\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\101\0\202\0\101\0\101\0\101"+
    "\0\303\0\101\0\u0104\0\u0145\0\101\0\u0186\0\u01c7\0\u0208"+
    "\0\u0249\0\u028a\0\101\0\101\0\101\0\101\0\u02cb\0\101"+
    "\0\101\0\u030c\0\u034d\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492"+
    "\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a"+
    "\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\101\0\u0861"+
    "\0\u08a2\0\101\0\101\0\u08e3\0\101\0\u0924\0\101\0\u0965"+
    "\0\101\0\101\0\101\0\u09a6\0\101\0\101\0\u09e7\0\u0a28"+
    "\0\101\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u05d7\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6"+
    "\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\u1450\0\101\0\u1491\0\u14d2\0\101\0\u1513\0\u1554"+
    "\0\u1595\0\u15d6\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7\0\u05d7"+
    "\0\u05d7\0\u1617\0\u1658\0\u05d7\0\u1699\0\u05d7\0\u16da\0\u05d7"+
    "\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2"+
    "\0\u1923\0\u05d7\0\u1964\0\u19a5\0\u05d7\0\u05d7\0\u19e6\0\u1a27"+
    "\0\u05d7\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u05d7\0\u05d7\0\u05d7"+
    "\0\u1b6c\0\u134c\0\u140f\0\u1bad\0\u1450\0\u1bee\0\u1491\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u05d7\0\u05d7\0\u1d33\0\u05d7\0\u05d7"+
    "\0\u1d74\0\u05d7\0\u05d7\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u05d7"+
    "\0\u05d7\0\u1eb9\0\u05d7\0\u1efa\0\u1f3b\0\u05d7\0\u1f7c\0\u05d7"+
    "\0\u1fbd\0\101\0\101\0\u1ffe\0\u203f\0\u05d7\0\u2080\0\u20c1"+
    "\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u05d7\0\u234b\0\u238c\0\u23cd\0\u240e\0\u05d7\0\u244f"+
    "\0\u05d7\0\u2490\0\u24d1\0\u05d7\0\u2512\0\u2553\0\u05d7\0\u05d7"+
    "\0\u2594\0\u05d7\0\u25d5\0\u05d7\0\u05d7\0\u05d7\0\u2616\0\u2657"+
    "\0\u2698\0\u05d7\0\u05d7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\45\1\46\1\45\1\47\1\50"+
    "\2\45\1\51\1\52\1\53\1\54\2\45\1\55\1\45"+
    "\1\56\1\2\1\57\1\2\1\60\2\45\2\61\2\45"+
    "\1\2\2\57\104\0\1\62\104\0\1\63\102\0\1\64"+
    "\1\65\100\0\1\66\4\0\1\67\67\0\1\70\5\0"+
    "\1\64\76\0\1\71\2\0\1\15\100\0\1\72\1\73"+
    "\1\74\73\0\1\75\3\0\1\76\117\0\1\77\24\0"+
    "\1\100\43\0\1\101\103\0\1\45\1\102\1\103\3\45"+
    "\1\104\1\105\24\45\2\0\11\45\32\0\12\45\1\106"+
    "\21\45\2\0\11\45\32\0\11\45\1\107\1\110\2\45"+
    "\1\111\1\45\1\112\14\45\2\0\11\45\32\0\13\45"+
    "\1\113\20\45\2\0\11\45\32\0\12\45\1\114\21\45"+
    "\2\0\11\45\32\0\13\45\1\115\20\45\2\0\11\45"+
    "\32\0\11\45\1\116\5\45\1\117\14\45\2\0\11\45"+
    "\32\0\17\45\1\120\14\45\2\0\11\45\32\0\15\45"+
    "\1\121\16\45\2\0\11\45\32\0\6\45\1\122\1\123"+
    "\11\45\1\124\12\45\2\0\11\45\32\0\7\45\1\125"+
    "\24\45\2\0\11\45\32\0\34\45\2\0\11\45\32\0"+
    "\7\45\1\126\1\127\7\45\1\130\4\45\1\131\6\45"+
    "\2\0\11\45\32\0\4\45\1\132\2\45\1\133\14\45"+
    "\1\134\7\45\2\0\11\45\32\0\17\45\1\135\14\45"+
    "\2\0\11\45\32\0\1\136\33\45\2\0\11\45\32\0"+
    "\1\137\3\45\1\140\27\45\2\0\11\45\32\0\1\141"+
    "\11\45\1\142\4\45\1\143\14\45\2\0\11\45\32\0"+
    "\7\45\1\144\24\45\2\0\11\45\32\0\3\45\1\145"+
    "\30\45\2\0\11\45\2\0\63\56\1\146\1\147\14\56"+
    "\30\0\1\150\1\151\17\150\1\152\12\150\2\0\1\150"+
    "\1\61\2\150\2\61\1\0\1\150\33\0\34\150\2\0"+
    "\1\150\1\61\2\150\2\61\1\0\1\150\3\0\65\64"+
    "\1\57\11\64\1\57\1\64\12\0\1\153\66\0\6\154"+
    "\1\155\72\154\12\0\1\156\136\0\1\157\71\0\1\160"+
    "\67\0\2\45\1\161\31\45\2\0\11\45\32\0\2\45"+
    "\1\162\31\45\2\0\11\45\32\0\6\45\1\163\25\45"+
    "\2\0\11\45\32\0\10\45\1\164\23\45\2\0\11\45"+
    "\32\0\3\45\1\165\30\45\2\0\11\45\32\0\3\45"+
    "\1\166\23\45\1\167\4\45\2\0\11\45\32\0\20\45"+
    "\1\170\13\45\2\0\11\45\32\0\30\45\1\171\3\45"+
    "\2\0\11\45\32\0\20\45\1\172\13\45\2\0\11\45"+
    "\32\0\15\45\1\173\16\45\2\0\11\45\32\0\7\45"+
    "\1\174\24\45\2\0\11\45\32\0\11\45\1\175\22\45"+
    "\2\0\11\45\32\0\3\45\1\176\30\45\2\0\11\45"+
    "\32\0\7\45\1\177\24\45\2\0\11\45\32\0\3\45"+
    "\1\200\3\45\1\201\24\45\2\0\11\45\32\0\2\45"+
    "\1\202\31\45\2\0\11\45\32\0\2\45\1\203\31\45"+
    "\2\0\11\45\32\0\12\45\1\204\21\45\2\0\11\45"+
    "\32\0\1\205\2\45\1\206\7\45\1\207\10\45\1\210"+
    "\7\45\2\0\11\45\32\0\15\45\1\211\16\45\2\0"+
    "\11\45\32\0\3\45\1\212\30\45\2\0\11\45\32\0"+
    "\11\45\1\213\22\45\2\0\11\45\32\0\24\45\1\214"+
    "\7\45\2\0\11\45\32\0\25\45\1\215\6\45\2\0"+
    "\11\45\32\0\11\45\1\216\22\45\2\0\11\45\32\0"+
    "\11\45\1\217\22\45\2\0\11\45\32\0\10\45\1\220"+
    "\23\45\2\0\11\45\32\0\6\45\1\221\25\45\2\0"+
    "\11\45\32\0\4\45\1\222\27\45\2\0\11\45\32\0"+
    "\11\45\1\223\3\45\1\224\16\45\2\0\11\45\32\0"+
    "\5\45\1\225\26\45\2\0\11\45\32\0\7\45\1\226"+
    "\24\45\2\0\11\45\32\0\4\45\1\227\27\45\2\0"+
    "\11\45\32\0\3\45\1\230\30\45\2\0\11\45\32\0"+
    "\4\45\1\231\27\45\2\0\11\45\32\0\34\232\2\0"+
    "\6\232\1\0\1\232\3\0\65\56\1\0\13\56\30\0"+
    "\34\150\2\0\6\150\1\0\1\150\33\0\34\150\2\0"+
    "\1\150\2\233\1\150\1\233\1\150\1\0\1\150\33\0"+
    "\2\234\3\150\1\234\2\150\2\234\13\150\1\234\6\150"+
    "\2\0\1\150\1\234\1\235\3\234\1\0\1\150\3\0"+
    "\6\154\1\236\100\154\1\236\5\154\1\237\64\154\40\0"+
    "\1\240\72\0\1\241\76\0\3\45\1\242\30\45\2\0"+
    "\11\45\32\0\11\45\1\243\22\45\2\0\11\45\32\0"+
    "\11\45\1\244\22\45\2\0\11\45\32\0\2\45\1\245"+
    "\31\45\2\0\11\45\32\0\5\45\1\246\26\45\2\0"+
    "\11\45\32\0\11\45\1\247\22\45\2\0\11\45\32\0"+
    "\11\45\1\250\22\45\2\0\11\45\32\0\16\45\1\251"+
    "\15\45\2\0\11\45\32\0\11\45\1\252\22\45\2\0"+
    "\11\45\32\0\20\45\1\253\13\45\2\0\11\45\32\0"+
    "\5\45\1\254\26\45\2\0\11\45\32\0\11\45\1\255"+
    "\22\45\2\0\11\45\32\0\1\256\33\45\2\0\11\45"+
    "\32\0\11\45\1\257\22\45\2\0\11\45\32\0\23\45"+
    "\1\260\10\45\2\0\11\45\32\0\7\45\1\261\24\45"+
    "\2\0\11\45\32\0\6\45\1\262\25\45\2\0\11\45"+
    "\32\0\7\45\1\263\24\45\2\0\11\45\32\0\12\45"+
    "\1\264\21\45\2\0\11\45\32\0\3\45\1\265\30\45"+
    "\2\0\11\45\32\0\10\45\1\266\23\45\2\0\11\45"+
    "\32\0\23\45\1\267\10\45\2\0\11\45\32\0\3\45"+
    "\1\270\30\45\2\0\11\45\32\0\15\45\1\271\16\45"+
    "\2\0\11\45\32\0\2\235\3\150\1\235\2\150\2\235"+
    "\13\150\1\235\6\150\2\0\1\150\1\235\1\150\3\235"+
    "\1\0\1\150\3\0\6\154\1\236\5\154\1\57\64\154"+
    "\15\0\1\272\116\0\1\273\75\0\4\45\1\274\27\45"+
    "\2\0\11\45\32\0\4\45\1\275\27\45\2\0\11\45"+
    "\32\0\14\45\1\276\17\45\2\0\11\45\32\0\17\45"+
    "\1\277\14\45\2\0\11\45\32\0\3\45\1\300\30\45"+
    "\2\0\11\45\32\0\7\45\1\301\24\45\2\0\11\45"+
    "\32\0\12\45\1\302\21\45\2\0\11\45\32\0\5\45"+
    "\1\303\26\45\2\0\11\45\32\0\15\45\1\304\16\45"+
    "\2\0\11\45\32\0\6\45\1\305\25\45\2\0\11\45"+
    "\32\0\15\45\1\306\16\45\2\0\11\45\32\0\1\307"+
    "\33\45\2\0\11\45\32\0\7\45\1\310\24\45\2\0"+
    "\11\45\32\0\1\311\33\45\2\0\11\45\32\0\3\45"+
    "\1\312\30\45\2\0\11\45\32\0\15\45\1\313\16\45"+
    "\2\0\11\45\32\0\6\45\1\314\25\45\2\0\11\45"+
    "\32\0\10\45\1\315\23\45\2\0\11\45\32\0\2\45"+
    "\1\316\31\45\2\0\11\45\32\0\3\45\1\317\30\45"+
    "\2\0\11\45\32\0\11\45\1\320\22\45\2\0\11\45"+
    "\32\0\11\45\1\321\22\45\2\0\11\45\32\0\3\45"+
    "\1\322\30\45\2\0\11\45\32\0\3\45\1\323\30\45"+
    "\2\0\11\45\32\0\30\45\1\324\3\45\2\0\11\45"+
    "\32\0\5\45\1\325\26\45\2\0\11\45\32\0\7\45"+
    "\1\326\24\45\2\0\11\45\32\0\22\45\1\327\11\45"+
    "\2\0\11\45\32\0\2\45\1\330\31\45\2\0\11\45"+
    "\32\0\3\45\1\331\30\45\2\0\11\45\32\0\2\45"+
    "\1\332\31\45\2\0\11\45\32\0\15\45\1\333\16\45"+
    "\2\0\11\45\32\0\11\45\1\334\22\45\2\0\11\45"+
    "\32\0\3\45\1\335\30\45\2\0\11\45\32\0\3\45"+
    "\1\336\30\45\2\0\11\45\32\0\15\45\1\337\16\45"+
    "\2\0\11\45\32\0\17\45\1\340\14\45\2\0\11\45"+
    "\32\0\23\45\1\341\10\45\2\0\11\45\32\0\7\45"+
    "\1\342\24\45\2\0\11\45\32\0\11\45\1\343\22\45"+
    "\2\0\11\45\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9945];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\5\1\4\11\1\1\2\11\25\1\1\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\0\3\11\1\1\2\11"+
    "\2\0\1\11\45\1\1\0\3\1\1\11\2\0\1\11"+
    "\2\0\55\1\1\0\1\1\2\0\30\1\2\11\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[227];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\'' && c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nfour escape sequences: \\\\, \\n, \\\', and \\\"");
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.replaceAll("_","");
        n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_hexnum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 16);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The hex number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_binarynum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 2);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The binary number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CompLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2308) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return alloy_sym(yytext(), CompSym.AMPERSAND   );
          }
        case 89: break;
        case 50: 
          { return alloy_sym(yytext(), CompSym.SEQ         );
          }
        case 90: break;
        case 63: 
          { return alloy_binarynum (yytext());
          }
        case 91: break;
        case 78: 
          { return alloy_sym(yytext(), CompSym.CMD         );
          }
        case 92: break;
        case 38: 
          { return alloy_sym(yytext(), CompSym.IMPLIES     );
          }
        case 93: break;
        case 23: 
          { return alloy_sym(yytext(), CompSym.RBRACE      );
          }
        case 94: break;
        case 85: 
          { return alloy_sym(yytext(), CompSym.EXACTLY     );
          }
        case 95: break;
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character. HEX: \\u"+Integer.toString(yytext().charAt(0),16)+")");
          }
        case 96: break;
        case 53: 
          { return alloy_sym(yytext(), CompSym.RUN         );
          }
        case 97: break;
        case 36: 
          { return alloy_sym(yytext(), CompSym.SHL         );
          }
        case 98: break;
        case 35: 
          { return alloy_sym(yytext(), CompSym.DOMAIN      );
          }
        case 99: break;
        case 61: 
          { return alloy_sym(yytext(), CompSym.SIGINT      );
          }
        case 100: break;
        case 24: 
          { return alloy_sym(yytext(), CompSym.TILDE       );
          }
        case 101: break;
        case 21: 
          { return alloy_sym(yytext(), CompSym.LBRACE      );
          }
        case 102: break;
        case 7: 
          { return alloy_sym(yytext(), CompSym.STAR        );
          }
        case 103: break;
        case 30: 
          { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
          }
        case 104: break;
        case 59: 
          { return alloy_sym(yytext(), CompSym.FUN         );
          }
        case 105: break;
        case 84: 
          { return alloy_sym(yytext(), CompSym.STRING      );
          }
        case 106: break;
        case 55: 
          { return alloy_sym(yytext(), CompSym.EXH         );
          }
        case 107: break;
        case 56: 
          { return alloy_sym(yytext(), CompSym.INT         );
          }
        case 108: break;
        case 52: 
          { return alloy_sym(yytext(), CompSym.SIG         );
          }
        case 109: break;
        case 76: 
          { return alloy_sym(yytext(), CompSym.PRED        );
          }
        case 110: break;
        case 25: 
          { return alloy_id  (yytext());
          }
        case 111: break;
        case 67: 
          { return alloy_sym(yytext(), CompSym.LONE        );
          }
        case 112: break;
        case 41: 
          { return alloy_sym(yytext(), CompSym.NO          );
          }
        case 113: break;
        case 9: 
          { return alloy_sym(yytext(), CompSym.COMMA       );
          }
        case 114: break;
        case 40: 
          { return alloy_sym(yytext(), CompSym.AS          );
          }
        case 115: break;
        case 66: 
          { return alloy_sym(yytext(), CompSym.THIS        );
          }
        case 116: break;
        case 13: 
          { return alloy_sym(yytext(), CompSym.SLASH       );
          }
        case 117: break;
        case 48: 
          { return alloy_sym(yytext(), CompSym.BUT         );
          }
        case 118: break;
        case 43: 
          { return alloy_string(yytext());
          }
        case 119: break;
        case 69: 
          { return alloy_sym(yytext(), CompSym.DISJ        );
          }
        case 120: break;
        case 32: 
          { return alloy_sym(yytext(), CompSym.SHA         );
          }
        case 121: break;
        case 39: 
          { return alloy_sym(yytext(), CompSym.OR          );
          }
        case 122: break;
        case 45: 
          { return alloy_sym(yytext(), CompSym.SHR         );
          }
        case 123: break;
        case 87: 
          { return alloy_sym(yytext(), CompSym.PRIVATE     );
          }
        case 124: break;
        case 31: 
          { return alloy_sym(yytext(), CompSym.ARROW       );
          }
        case 125: break;
        case 33: 
          { return alloy_sym(yytext(), CompSym.GTE         );
          }
        case 126: break;
        case 20: 
          { return alloy_sym(yytext(), CompSym.CARET       );
          }
        case 127: break;
        case 46: 
          { return alloy_sym(yytext(), CompSym.IFF         );
          }
        case 128: break;
        case 70: 
          { return alloy_sym(yytext(), CompSym.ELSE        );
          }
        case 129: break;
        case 3: 
          { return alloy_sym(yytext(), CompSym.HASH        );
          }
        case 130: break;
        case 12: 
          { return alloy_sym(yytext(), CompSym.DOT         );
          }
        case 131: break;
        case 22: 
          { return alloy_sym(yytext(), CompSym.BAR         );
          }
        case 132: break;
        case 82: 
          { return alloy_sym(yytext(), CompSym.EXPECT      );
          }
        case 133: break;
        case 8: 
          { return alloy_sym(yytext(), CompSym.PLUS        );
          }
        case 134: break;
        case 37: 
          { return alloy_sym(yytext(), CompSym.LTE         );
          }
        case 135: break;
        case 57: 
          { return alloy_sym(yytext(), CompSym.ONE         );
          }
        case 136: break;
        case 58: 
          { return alloy_sym(yytext(), CompSym.VAL         );
          }
        case 137: break;
        case 74: 
          { return alloy_sym(yytext(), CompSym.OPEN        );
          }
        case 138: break;
        case 64: 
          { return alloy_hexnum (yytext());
          }
        case 139: break;
        case 11: 
          { return alloy_sym(yytext(), CompSym.GT          );
          }
        case 140: break;
        case 83: 
          { return alloy_sym(yytext(), CompSym.MODULE      );
          }
        case 141: break;
        case 14: 
          { return alloy_sym(yytext(), CompSym.COLON       );
          }
        case 142: break;
        case 51: 
          { return alloy_sym(yytext(), CompSym.SUM         );
          }
        case 143: break;
        case 75: 
          { return alloy_sym(yytext(), CompSym.PART        );
          }
        case 144: break;
        case 16: 
          { return alloy_sym(yytext(), CompSym.EQUALS      );
          }
        case 145: break;
        case 86: 
          { return alloy_sym(yytext(), CompSym.EXTENDS     );
          }
        case 146: break;
        case 26: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 147: break;
        case 60: 
          { return alloy_sym(yytext(), CompSym.FOR         );
          }
        case 148: break;
        case 28: 
          { return alloy_num (yytext());
          }
        case 149: break;
        case 73: 
          { return alloy_sym(yytext(), CompSym.IDEN        );
          }
        case 150: break;
        case 15: 
          { return alloy_sym(yytext(), CompSym.LT          );
          }
        case 151: break;
        case 17: 
          { return alloy_sym(yytext(), CompSym.AT          );
          }
        case 152: break;
        case 34: 
          { return alloy_sym(yytext(), CompSym.RANGE       );
          }
        case 153: break;
        case 72: 
          { return alloy_sym(yytext(), CompSym.UNIV        );
          }
        case 154: break;
        case 2: 
          { return alloy_sym(yytext(), CompSym.NOT         );
          }
        case 155: break;
        case 49: 
          { return alloy_sym(yytext(), CompSym.SET         );
          }
        case 156: break;
        case 6: 
          { return alloy_sym(yytext(), CompSym.RPAREN      );
          }
        case 157: break;
        case 42: 
          { return alloy_sym(yytext(), CompSym.IN          );
          }
        case 158: break;
        case 80: 
          { return alloy_sym(yytext(), CompSym.CHECK       );
          }
        case 159: break;
        case 29: 
          { return alloy_sym(yytext(), CompSym.AND         );
          }
        case 160: break;
        case 65: 
          { return alloy_sym(yytext(), CompSym.SOME        );
          }
        case 161: break;
        case 77: 
          { return alloy_sym(yytext(), CompSym.FACT        );
          }
        case 162: break;
        case 10: 
          { return alloy_sym(yytext(), CompSym.MINUS       );
          }
        case 163: break;
        case 5: 
          { return alloy_sym(yytext(), CompSym.LPAREN      );
          }
        case 164: break;
        case 79: 
          { return alloy_sym(yytext(), CompSym.TEST        );
          }
        case 165: break;
        case 68: 
          { return alloy_sym(yytext(), CompSym.NONE        );
          }
        case 166: break;
        case 18: 
          { return alloy_sym(yytext(), CompSym.LBRACKET    );
          }
        case 167: break;
        case 19: 
          { return alloy_sym(yytext(), CompSym.RBRACKET    );
          }
        case 168: break;
        case 71: 
          { return alloy_sym(yytext(), CompSym.ENUM        );
          }
        case 169: break;
        case 47: 
          { return alloy_sym(yytext(), CompSym.ALL         );
          }
        case 170: break;
        case 88: 
          { return alloy_sym(yytext(), CompSym.ABSTRACT    );
          }
        case 171: break;
        case 81: 
          { return alloy_sym(yytext(), CompSym.ASSERT      );
          }
        case 172: break;
        case 62: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 173: break;
        case 54: 
          { return alloy_sym(yytext(), CompSym.LET         );
          }
        case 174: break;
        case 27: 
          { 
          }
        case 175: break;
        case 44: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
